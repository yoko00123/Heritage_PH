{"recipe":"html-to-xlsx","shortid":"BydINLPgX","engine":"handlebars","modificationDate":"2018-06-08T01:34:29.237Z","phantom":{"margin":"{\"left\":\"100px\",\"right\":\"100px\"}","footerHeight":"3.5cm","headerHeight":"3.5cm","header":"<center>\n<table border = \"0\">\n    <thead style=\"font-family: Verdana;\">\n        <tr>\n         {{!--<th style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">{{Single DataSource \"Company\"}} </th>--}}\n        </tr>\n        <tr>\n        <th style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">Final Pay Report</th>\n        </tr>\n         {{!--<tr> --}}\n         {{!--<th center style=\"border-style:none; font-size:12pt;\">{{SingleDate DataSource \"StartDate\" \"mmmm dd, yyyy\"}} - {{SingleDate DataSource \"EndDate\" \"mmmm dd, yyyy\"}}</th>--}}\n         {{!--</tr>--}}\n     </thead>\n</table></center>\n","footer":"{{!--<div style='display: none' id='last'>--}}\n{{!--    <table style=\"border-collapse:collapse; width: 100%;\">--}}\n{{!--               <tfoot>--}}\n{{!--                <tr style=\"font-family:Verdana; font-size:10pt;\">--}}\n{{!--                    <td center>{{Single ParameterFields \"PreparedBy\"}}</td>--}}\n{{!--                    <td colspan = \"3\"></td>--}}\n{{!--                    <td center>{{Single ParameterFields \"CheckedBy\"}}</td>--}}\n{{!--                    <td colspan = \"3\"></td>--}}\n{{!--                    <td center>{{Single ParameterFields \"ApprovedBy\"}}</td>--}}\n{{!--                </tr>--}}\n{{!--                <tr style=\"font-family:Verdana; font-size:10pt;\">--}}\n{{!--                    <th></th>--}}\n{{!--                    <th style=\"border-top:1px solid black; font-weight:normal; font-color:black;\" colspan = \"1\" center>Prepared by</th>--}}\n{{!--                    <td colspan = \"3\" ></td>--}}\n{{!--                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Checked by</th>--}}\n{{!--                    <td colspan = \"3\"></td>--}}\n{{!--                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Approved by</th>--}}\n{{!--               </tr>--}}\n{{!--            </tfoot>--}}\n{{!--        </table>--}}\n{{!--</div>--}}\n\n{{!--<script>--}}\n{{!--    if ({#pageNum} == {#numPages}) {--}}\n{{!--        document.getElementById('last').style.display='block'--}}\n{{!--    } else {--}}\n{{!--        document.getElementById('last').style.display='none'--}}\n{{!--    }--}}\n{{!--</script>--}}\n{{!--<br><br>--}}\n{{!--<div style=\"float:left;  font-size:8pt; font-family:Verdana;\"> Print Date: {{FormatDate Date 'mmm dd, yyyy'}}<br>--}}\n{{!-- Print Time: {{FormatDate Time 'h:MM TT'}}  </div>--}}\n{{!--  <div style=\"float:right; font-size:8pt; font-family:Verdana;\">{#pageNum}/{#numPages}</div >--}}\n "},"_id":"e7U5YupP4F27wxjI","name":"FinalPay(Excel)","content":"<style>\n    [MyFont] {\n        font: 12pt Verdana;\n    }\n\n    body {\n        font: 12pt Verdana;\n    }\n\n    [MyFont2] {\n        font: 10pt Verdana;\n    }\n\n    [MyFont] table {\n        width: 100%;\n    }\n\n    [bold] {\n        font-weight: bold;\n    }\n\n    [left] {\n        text-align: left;\n    }\n\n    [right] {\n        text-align: right;\n    }\n\n    [center] {\n        text-align: center;\n    }\n\n    [bot-border] {\n        border-bottom: 1px solid black;\n    }\n\n    [top-border] {\n        border-top: 1px solid black;\n    }\n\n    [padding-bot] {\n        padding-bottom: 10px;\n    }\n\n    [padding-top] {\n        padding-top: 10px;\n    }\n    [bot-border2]{\n        border-bottom:2px solid black;\n    }\n</style>\n\n<table width=100% border=0>\n    <tr>\n        <td padding-bot bold>Final Pay Computation</td>\n    </tr>\n    <tr>\n        <td padding-bot width=5%>13th Month</td>\n        <td width=100% MyFont2 padding-bot right bot-border>778.93</td>\n    </tr>\n    <tr>\n        <td padding-top width=5%></td>\n        <td width=100% MyFont2 padding-top right>778.93</td>\n    </tr>\n      <tr>\n        <td padding-bot bold>Less</td>\n    </tr>\n    <tr>\n        <td padding-bot width=5%></td>\n        <td width=100% MyFont2 padding-bot right bot-border></td>\n    </tr>\n    <tr>\n        <td padding-top width=5%></td>\n        <td width=100% MyFont2 padding-top right></td>\n    </tr>\n    <tr>\n        <td padding-bot >Gross Amount</td>\n        <td width=100% MyFont2 padding-bot right bot-border>774.89</td>\n    </tr>\n    <tr>\n        <td padding-bot>Deduction Amount</td>\n        <td width=100% MyFont2 padding-bot right bot-border>0.00</td>\n    </tr>\n    <tr>\n        <td padding-top width=5%>Net Amount</td>\n        <td width=100% MyFont2 padding-top border-top right>774.89</td>\n    </tr>\n    <tr><td></td></tr><tr><td></td></tr>\n    <tr>\n        <td bot-border2></td>\n        <td bot-border2></td>\n    </tr>\n    <tr>\n        <td padding-bot bold> Annualization </td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Taxable Basic Salary</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Taxable Salaries and Other Forms of Compensation</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Taxable 13th Month and Other Benefits</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n    <tr>\n        <td padding-bot top-border bold>Total Taxable</td>\n        <td width=100% MyFont2 padding-bot right top-border>774.89</td>\n    </tr>\n    <tr>\n        <td padding-bot bold>Less</td>\n    </tr>\n    <tr>\n        <td padding-top width=5%>Exemption</td>\n        <td width=100% MyFont2 padding-top border-top right>50,000.00</td>\n    </tr>\n     <tr><td></td></tr><tr><td></td></tr>\n    <tr>\n        <td bot-border2></td>\n        <td bot-border2></td>\n    </tr>\n    <tr>\n        <td padding-bot bold> Net Taxable Compensation Income </td>\n        <td width=100% MyFont2 right> 0.00</td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Tax on Base</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Tax in Excess</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n     <tr>\n        <td padding-bot width=100%>Tax Due</td>\n        <td width=100% MyFont2 right>0.00</td>\n    </tr>\n    <tr>\n        <td padding-bot bold>Less</td>\n    </tr>\n    <tr>\n        <td padding-top width=5%>Tax Withheld</td>\n        <td width=100% MyFont2 padding-top border-top right>0.00</td>\n    </tr>\n     <tr><td></td></tr><tr><td></td></tr>\n    <tr>\n        <td bot-border2></td>\n        <td bot-border2></td>\n    </tr>\n     <tr>\n        <td padding-bot bold>Tax Refund / (Payable) </td>\n        <td width=100% MyFont2 right> -</td>\n    </tr>\n</table>","helpers":"//Set number of computed columns\nvar _count = 5; // 5 = how many columns will have to add\nvar _total = new Array(5);\nvar _grandtotal = new Array(5);\n\nfunction resetValue() {\n    for (var i = 0; i < _count; i++) {\n        _total[i] = 0.00;\n    }\n}\n\n//Set initial value of totals\nfor (var i = 0; i < _count; i++) {\n    _total[i] = 0.00;\n    _grandtotal[i] = 0.00;\n}\n\n//Update total values and grand total values\nfunction InitGroup(val) {\n    for (var i = 0; i < _grandtotal.length; i++) {\n\n        _total[i] = 0.00;\n        _grandtotal[i] = 0.00;\n    }\n    return val;\n}\n\n//Return total value based on index\nfunction GetTotal(index) {\n    return AddComma(_total[index].toFixed(2));\n}\n\n//Return grand total value based on index\nfunction GetGrandTotal(index) {\n    return AddComma(_grandtotal[index].toFixed(2));\n}\n\n//Updates amount\n//Change zero amount to '-'\nfunction CheckZero(index, amt) {\n    _total[index] += parseFloat(amt);\n    _grandtotal[index] += parseFloat(amt);\n    return parseFloat(amt) > 0 ? AddComma(amt) : amt;\n    //return parseFloat(amt) > 0 ? amt.toFixed(2) : '-';\n\n}\n\nfunction CheckZeroForGrandTotal(index, amt) {\n    _grandtotal[index] += parseFloat(amt);\n    return parseFloat(amt) > 0 ? AddComma(amt) : amt;\n}\n\nfunction AddComma(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction Single(ds, col) {\n    if (ds.length === 0) return '';\n    return ds[0][col];\n}\n\nfunction SingleDate(ds, col, frmt) {\n    var gg = Single(ds, col);\n    return DateTime.Format(gg, frmt)\n}\n\nfunction FormatDate(dt, frmt) {\n    return DateTime.Format(dt, frmt);\n}\n\nfunction Sum(itms) {\n    return itms.length;\n}\n\nvar DateTime = (function() {\n    return {\n        Format: function() {\n            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n                timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n                timezoneClip = /[^-+\\dA-Z]/g,\n                pad = function(val, len) {\n                    val = String(val);\n                    len = len || 2;\n                    while (val.length < len) val = \"0\" + val;\n                    return val;\n                };\n\n            // Regexes and supporting functions are cached through closure\n            return function(date, mask, utc) {\n                //var dF = DateTime.Format;\n                if (DateTime.IsNewtonFormat(date))\n                    date = date.replace('T', ' ');\n\n                // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n                if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n                    mask = date;\n                    date = undefined;\n                }\n\n                // Passing date through Date applies Date.parse, if necessary\n                date = date ? new Date(date) : new Date;\n                if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n                //mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n                mask = String(DateTime.masks[mask] || mask || DateTime.masks['default']);\n\n                // Allow setting the utc argument via the mask\n                if (mask.slice(0, 4) == \"UTC:\") {\n                    mask = mask.slice(4);\n                    utc = true;\n                }\n\n                var _ = utc ? \"getUTC\" : \"get\",\n                    d = date[_ + \"Date\"](),\n                    D = date[_ + \"Day\"](),\n                    m = date[_ + \"Month\"](),\n                    y = date[_ + \"FullYear\"](),\n                    H = date[_ + \"Hours\"](),\n                    M = date[_ + \"Minutes\"](),\n                    s = date[_ + \"Seconds\"](),\n                    L = date[_ + \"Milliseconds\"](),\n                    o = utc ? 0 : date.getTimezoneOffset(),\n                    flags = {\n                        d: d,\n                        dd: pad(d),\n                        ddd: DateTime.i18n.dayNames[D], // dF.i18n.dayNames[D],\n                        dddd: DateTime.i18n.dayNames[D + 7],\n                        m: m + 1,\n                        mm: pad(m + 1),\n                        mmm: DateTime.i18n.monthNames[m],\n                        mmmm: DateTime.i18n.monthNames[m + 12],\n                        yy: String(y).slice(2),\n                        yyyy: y,\n                        h: H % 12 || 12,\n                        hh: pad(H % 12 || 12),\n                        H: H,\n                        HH: pad(H),\n                        M: M,\n                        MM: pad(M),\n                        s: s,\n                        ss: pad(s),\n                        l: pad(L, 3),\n                        L: pad(L > 99 ? Math.round(L / 10) : L),\n                        t: H < 12 ? \"a\" : \"p\",\n                        tt: H < 12 ? \"am\" : \"pm\",\n                        T: H < 12 ? \"A\" : \"P\",\n                        TT: H < 12 ? \"AM\" : \"PM\",\n                        Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                        o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                        S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                    };\n\n                return mask.replace(token, function($0) {\n                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n                });\n            };\n        }(),\n        masks: {\n            \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n            shortDate: \"m/d/yy\",\n            mediumDate: \"mmm dd, yyyy\",\n            longDate: \"mmmm d, yyyy\",\n            fullDate: \"dddd, mmmm d, yyyy\",\n            shortTime: \"h:MM TT\",\n            mediumTime: \"h:MM:ss TT\",\n            longTime: \"h:MM:ss TT Z\",\n            isoDate: \"yyyy-mm-dd\",\n            isoTime: \"HH:MM:ss\",\n            isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n            isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n            inSysDateTime: \"hh:MM TT mmm dd, yyyy\",\n            sometime: 'hhMMss',\n            shortDate2: \"mm/dd/yyyy\",\n            jDPInsysDate: \"M dd, yyyy\"\n        },\n        i18n: {\n            dayNames: [\n                \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n                \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n            ],\n            monthNames: [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n            ]\n        },\n        JSONDate: function(jsonDate, format) {\n            //console.log(jsonDate.match(/\\d+/)[0]);\n\n            var d = new Date(parseInt(jsonDate.substr(6)));\n\n            return DateTime.Format(d, format);\n        },\n        ShortDate2: function(dateValue) {\n            date = new Date();\n\n            if (typeof dateValue != 'undefined')\n                date = dateValue;\n\n            return DateTime.Format(date, DateTime.masks.shortDate2)\n        },\n        Between: function(sdate, edate, callback, onFinish) {\n            try {\n                var i = 0;\n                var d = sdate;\n                while (true) {\n                    if (d >= edate) {\n                        onFinish();\n                        break;\n                    } else\n                        callback(i, d);\n\n                    d.setTime(d.getTime() + 86400000);\n                    i++;\n                }\n            } catch (ex) {\n                console.error('DateTime.Between', ex);\n            }\n        },\n        ToDate: function(jsonDate) {\n            return new Date(parseInt(jsonDate.substr(6)));\n        },\n        IsNewtonFormat: function(dte) {\n            return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})?.(\\d{1,3})?$/.test(dte);\n            //return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})+(.\\d{3})?$/.test(dte);\n        }\n    }\n}())\n\nfunction get(obj, prop) {\n    var parts = prop.split('.'),\n        last = parts.pop();\n\n    while ((prop = parts.shift())) {\n        obj = obj[prop];\n\n        if (obj == null) {\n            return;\n        }\n    }\n\n    return obj[last];\n}\n\nfunction noop() {\n    return '';\n}\n\nfunction groupBy(handlebars) {\n    var helpers = {\n        /**\n         * @method group\n         * @param {Array} list\n         * @param {Object} options\n         * @param {Object} options.hash\n         * @param {String} options.hash.by\n         * @return {String} Rendered partial.\n         */\n        group: function(list, options) {\n            options = options || {};\n\n            var fn = options.fn || noop,\n                inverse = options.inverse || noop,\n                hash = options.hash,\n                prop = hash && hash.by,\n                //order = hash && hash.order,\n                keys = [],\n                groups = {};\n\n            if (!prop || !list || !list.length) {\n                return inverse(this);\n            }\n\n            function groupKey(item) {\n                var key = get(item, prop);\n\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n\n                if (!groups[key]) {\n                    groups[key] = {\n                        value: key,\n                        items: []\n                    };\n                }\n\n                groups[key].items.push(item);\n            }\n\n            function renderGroup(buffer, key) {\n                return buffer + fn(groups[key]);\n            }\n\n            list.forEach(groupKey);\n\n\n\n            return keys.reduce(renderGroup, '');\n        }\n    };\n\n    handlebars.registerHelper(helpers);\n\n    return handlebars;\n}"}