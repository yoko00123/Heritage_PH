{"recipe":"html-to-xlsx","shortid":"rkD4wDPem","engine":"handlebars","modificationDate":"2018-06-08T02:17:27.342Z","data":{"shortid":"SknCpRV1X"},"phantom":{"margin":"0.5","orientation":"portrait","headerHeight":"4.7cm","footerHeight":"3.5cm","header":"<style>\n    \n   table {\n        width: 100%; \n        /*border-collapse: collapse;*/\n    }\n    \n    /*thead > tr > th,  [border-bottom] {*/\n    /*    border-bottom: 1px solid black;*/\n    /*    padding-bottom:5px;*/\n    /*}*/\n    /*tfoot > tr > th, [border-top]{*/\n    /*    border-top: 1px  solid black;*/\n    /*    padding-top: 5px;*/\n    /*}*/\n    p {\n        font-size: 25;\n    }\n    \n    [center] {\n        text-align: center;\n    }\n    \n    [bold] {\n        font-weight: bold;\n    }\n    \n    [padding-20] {\n        padding-left : 20px;\n    }\n  [total]{\n      font-weight:bold;\n      font-size:25px;\n  }\n  [bot-border]{\n      border-bottom:1px solid black;\n  }\n  [padding-bot]{\n       padding-bottom:10px;\n  }\n  [top-margin]{\n      margin-top:35px;\n  }\n  /*thead { display: table-row-group } */\n</style>\n<center>\n<table border = \"0\">\n    <thead style=\"font-family: Verdana;\">\n        <tr>\n         <th style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">{{Single DataSource \"Company\"}} </th>\n        </tr>\n        <tr>\n        <th style=\"border-style:none; text-align:center; color:black; font-size:12pt;\">Employee Undertime Report</th></tr>\n    <tr>\n        <th  style=\"border-style:none; text-align:center; color:black; font-size:10pt;\">{{SingleDate DataSource \"StartDate\" \"mmm dd, yyyy\"}} - {{SingleDate DataSource \"EndDate\" \"mmm dd, yyyy\"}}</th>\n    </tr>\n     </thead>\n</table></center><br><br><br>\n<table>\n    <thead>\n        <tr style=\"font:10pt Verdana;\">\n            <th padding-bot bot-border style=\"text-align:left;\">Employee Code</th>\n            <th padding-bot bot-border style=\"text-align:left;\">Employee</th>\n            <th padding-bot bot-border style=\"text-align:left;\">Date</th>\n            <th padding-bot bot-border style=\"text-align:left;\">Daily Schedule</th>\n            <th padding-bot bot-border style=\"text-align:left;\">Time in/Time out</th>\n            <th padding-bot bot-border style=\"text-align:left;\">UT</th>\n           <th></th>\n        </tr>\n    </thead>\n    <tbody style=\"visibility:hidden; font:10pt Verdana;\">\n     {{#group DataSource by = \"EmployeeCode\"}}\n        <tr>\n            <td>{{value}}</td>\n        </tr>\n        {{#group items by = \"Employee\"}}\n        <tr>\n            \n            <td></td>\n            <td>{{value}}</td>\n        </tr>\n        \n        {{#each items}}\n        <tr>\n            \n          \n            <td></td>\n            <td></td>\n            <td style=\"\" >{{FormatDate Date \"mmm dd, yyyy\"}}</td>\n            <td style=\"\" >{{DailySchedule}}</td>\n            <td style=\"\" >{{FormatDate ComputedTimeIn \"hh:mm TT\"}} / {{FormatDate ComputedTimeOut \"hh:mm TT\"}}</td>\n            <td style=\"\" >{{UT}}</td>\n        </tr>\n        {{/each}}\n        {{/group}}\n        <tr>\n       <td style=\"font:10pt Verdana; \">Count: {{Sum items}} </td>\n    </tr> \n    <tr><td></td></tr>\n    \n        {{/group}}\n  <tr><td></td></tr><tr><td></td></tr>\n  <tr><td></td></tr><tr><td></td></tr>\n  <tr><td></td></tr><tr><td></td></tr> \n    </tbody>\n</table>\n\n","footer":"<div style='display: none' id='last'>\n    <table style=\"border-collapse:collapse; width: 100%;\">\n               <tfoot>\n                <tr style=\"font-family:Verdana; font-size:10pt;\">\n                    <td center>{{Single ParameterFields \"PreparedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"CheckedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"ApprovedBy\"}}</td>\n                </tr>\n                <tr style=\"font-family:Verdana; font-size:10pt;\">\n                    <th></th>\n                    <th style=\"border-top:1px solid black; font-weight:normal; font-color:black;\" colspan = \"1\" center>Prepared by</th>\n                    <td colspan = \"3\" ></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Checked by</th>\n                    <td colspan = \"3\"></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Approved by</th>\n               </tr>\n            </tfoot>\n        </table>\n</div>\n\n<script>\n    if ({#pageNum} == {#numPages}) {\n        document.getElementById('last').style.display='block'\n    } else {\n        document.getElementById('last').style.display='none'\n    }\n</script>\n<br><br>\n<div style=\"float:left;  font-size:8pt; font-family:Verdana;\"> Print Date: {{FormatDate Date 'mmm dd, yyyy'}}<br>\n Print Time: {{FormatDate Time 'h:MM TT'}}  </div>\n  <div style=\"float:right; font-size:8pt; font-family:Verdana;\">{#pageNum}/{#numPages}</div >\n "},"_id":"zhSYVbuMn9h1g8kH","name":"FINISH_EmployeeUndertime(Excel)","content":"<style>\n    \n   table {\n        width: 100%; \n        /*border-collapse: collapse;*/\n    }\n    \n    /*thead > tr > th,  [border-bottom] {*/\n    /*    border-bottom: 1px solid black;*/\n    /*    padding-bottom:5px;*/\n    /*}*/\n    /*tfoot > tr > th, [border-top]{*/\n    /*    border-top: 1px  solid black;*/\n    /*    padding-top: 5px;*/\n    /*}*/\n    p {\n        font-size: 25;\n    }\n    \n    [center] {\n        text-align: center;\n    }\n    \n    [bold] {\n        font-weight: bold;\n    }\n    \n    [padding-20] {\n        padding-left : 20px;\n    }\n  [total]{\n      font-weight:bold;\n      font-size:25px;\n  }\n  [bot-border]{\n      border-bottom:1px solid black;\n  }\n  [padding-bot]{\n       padding-bottom:10px;\n  }\n  [top-margin]{\n      margin-top:35px;\n  }\n  /*thead { display: table-row-group } */\n</style>\n<table>\n    <thead>\n        <tr style=\"visibility:hidden; font:10pt Verdana;\">\n            <th style=\"text-align:left;\">Employee Code</th>\n            <th style=\"text-align:left;\">Employee</th>\n            <th style=\"text-align:left;\">Date</th>\n            <th style=\"text-align:left;\">Daily Schedule</th>\n            <th style=\"text-align:left;\">Time in/Time out</th>\n            <th style=\"text-align:left;\">UT</th>\n           <th></th>\n        </tr>\n    </thead>\n    <tbody  style=\"font:10pt Verdana;\">\n        {{#group DataSource by = \"EmployeeCode\"}}\n        <tr>\n            <td>{{value}}</td>\n        </tr>\n        {{#group items by = \"Employee\"}}\n        <tr>\n            \n            <td></td>\n            <td>{{value}}</td>\n        </tr>\n        \n        {{#each items}}\n        <tr>\n            \n            <td></td>\n            <td></td>\n\n            <td style=\"\" >{{FormatDate Date \"mmm dd, yyyy\"}}</td>\n            <td style=\"\" >{{DailySchedule}}</td>\n            <td style=\"\" >{{FormatDate ComputedTimeIn \"hh:mm TT\"}} / {{FormatDate ComputedTimeOut \"hh:mm TT\"}}</td>\n            <td style=\"\" >{{UT}}</td>\n        </tr>\n        {{/each}}\n        {{/group}}\n        <tr>\n       <td style=\"font:10pt Verdana; \">Count: {{Sum items}} </td>\n    </tr> \n    \n        {{/group}}\n  <tr><td></td></tr><tr><td></td></tr>\n  <tr><td></td></tr><tr><td></td></tr>\n  <tr><td></td></tr><tr><td></td></tr> \n    </tbody>\n      <tr>\n        <td style=\"font:10pt Verdana; border-bottom:1px solid black; font-weight:bold;\" >Grand Total : {{GetTotalCount}}</td>\n    </tr>\n    <tr>\n        <td style=\"font:10pt Verdana; border-bottom:1px solid black; font-weight:bold;\" ></td>\n    </tr>\n</table>","helpers":"var _grandtotal = 0;\n\nfunction FormatDate(dt, frmt){\n    return DateTime.Format(dt, frmt);\n}\nfunction Sum(itms){\n    _grandtotal += itms.length;\n    return itms.length;\n}\nfunction GetTotalCount(){\n    return _grandtotal;\n}\nvar DateTime = (function () {\n\t\t\t        return {\n\t\t\t            Format: function () {\n\t\t\t                var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n                                timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n                                timezoneClip = /[^-+\\dA-Z]/g,\n                                pad = function (val, len) {\n                                    val = String(val);\n                                    len = len || 2;\n                                    while (val.length < len) val = \"0\" + val;\n                                    return val;\n                                };\n\n\t\t\t                // Regexes and supporting functions are cached through closure\n\t\t\t                return function (date, mask, utc) {\n\t\t\t                    //var dF = DateTime.Format;\n\t\t\t                    if (DateTime.IsNewtonFormat(date))\n\t\t\t                        date = date.replace('T', ' ');\n\n\t\t\t                    // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n\t\t\t                    if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n\t\t\t                        mask = date;\n\t\t\t                        date = undefined;\n\t\t\t                    }\n\n\t\t\t                    // Passing date through Date applies Date.parse, if necessary\n\t\t\t                    date = date ? new Date(date) : new Date;\n\t\t\t                    if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n\t\t\t                    //mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\t\t\t                    mask = String(DateTime.masks[mask] || mask || DateTime.masks['default']);\n\n\t\t\t                    // Allow setting the utc argument via the mask\n\t\t\t                    if (mask.slice(0, 4) == \"UTC:\") {\n\t\t\t                        mask = mask.slice(4);\n\t\t\t                        utc = true;\n\t\t\t                    }\n\n\t\t\t                    var _ = utc ? \"getUTC\" : \"get\",\n                                    d = date[_ + \"Date\"](),\n                                    D = date[_ + \"Day\"](),\n                                    m = date[_ + \"Month\"](),\n                                    y = date[_ + \"FullYear\"](),\n                                    H = date[_ + \"Hours\"](),\n                                    M = date[_ + \"Minutes\"](),\n                                    s = date[_ + \"Seconds\"](),\n                                    L = date[_ + \"Milliseconds\"](),\n                                    o = utc ? 0 : date.getTimezoneOffset(),\n                                    flags = {\n                                        d: d,\n                                        dd: pad(d),\n                                        ddd: DateTime.i18n.dayNames[D], // dF.i18n.dayNames[D],\n                                        dddd: DateTime.i18n.dayNames[D + 7],\n                                        m: m + 1,\n                                        mm: pad(m + 1),\n                                        mmm: DateTime.i18n.monthNames[m],\n                                        mmmm: DateTime.i18n.monthNames[m + 12],\n                                        yy: String(y).slice(2),\n                                        yyyy: y,\n                                        h: H % 12 || 12,\n                                        hh: pad(H % 12 || 12),\n                                        H: H,\n                                        HH: pad(H),\n                                        M: M,\n                                        MM: pad(M),\n                                        s: s,\n                                        ss: pad(s),\n                                        l: pad(L, 3),\n                                        L: pad(L > 99 ? Math.round(L / 10) : L),\n                                        t: H < 12 ? \"a\" : \"p\",\n                                        tt: H < 12 ? \"am\" : \"pm\",\n                                        T: H < 12 ? \"A\" : \"P\",\n                                        TT: H < 12 ? \"AM\" : \"PM\",\n                                        Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                                        o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                                        S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                                    };\n\n\t\t\t                    return mask.replace(token, function ($0) {\n\t\t\t                        return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n\t\t\t                    });\n\t\t\t                };\n\t\t\t            }(),\n\t\t\t            masks: {\n\t\t\t                \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n\t\t\t                shortDate: \"m/d/yy\",\n\t\t\t                mediumDate: \"mmm dd, yyyy\",\n\t\t\t                longDate: \"mmmm d, yyyy\",\n\t\t\t                fullDate: \"dddd, mmmm d, yyyy\",\n\t\t\t                shortTime: \"h:MM TT\",\n\t\t\t                mediumTime: \"h:MM:ss TT\",\n\t\t\t                longTime: \"h:MM:ss TT Z\",\n\t\t\t                isoDate: \"yyyy-mm-dd\",\n\t\t\t                isoTime: \"HH:MM:ss\",\n\t\t\t                isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n\t\t\t                isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n\t\t\t                inSysDateTime: \"hh:MM TT mmm dd, yyyy\",\n\t\t\t                sometime: 'hhMMss',\n\t\t\t                shortDate2: \"mm/dd/yyyy\",\n\t\t\t                jDPInsysDate: \"M dd, yyyy\"\n\t\t\t            },\n\t\t\t            i18n: {\n\t\t\t                dayNames: [\n                                \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n                                \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n\t\t\t                ],\n\t\t\t                monthNames: [\n                                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n                                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t\t\t                ]\n\t\t\t            },\n\t\t\t            JSONDate: function (jsonDate, format) {\n\t\t\t                //console.log(jsonDate.match(/\\d+/)[0]);\n\n\t\t\t                var d = new Date(parseInt(jsonDate.substr(6)));\n\n\t\t\t                return DateTime.Format(d, format);\n\t\t\t            },\n\t\t\t            ShortDate2: function (dateValue) {\n\t\t\t                date = new Date();\n\n\t\t\t                if (typeof dateValue != 'undefined')\n\t\t\t                    date = dateValue;\n\n\t\t\t                return DateTime.Format(date, DateTime.masks.shortDate2)\n\t\t\t            },\n\t\t\t            Between: function (sdate, edate, callback, onFinish) {\n\t\t\t                try {\n\t\t\t                    var i = 0;\n\t\t\t                    var d = sdate;\n\t\t\t                    while (true) {\n\t\t\t                        if (d >= edate) {\n\t\t\t                            onFinish();\n\t\t\t                            break;\n\t\t\t                        } else\n\t\t\t                            callback(i, d);\n\n\t\t\t                        d.setTime(d.getTime() + 86400000);\n\t\t\t                        i++;\n\t\t\t                    }\n\t\t\t                } catch (ex) {\n\t\t\t                    console.error('DateTime.Between', ex);\n\t\t\t                }\n\t\t\t            },\n\t\t\t            ToDate: function (jsonDate) {\n\t\t\t                return new Date(parseInt(jsonDate.substr(6)));\n\t\t\t            },\n\t\t\t            IsNewtonFormat: function (dte) {\n\t\t\t                return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})?.(\\d{1,3})?$/.test(dte);\n\t\t\t                //return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})+(.\\d{3})?$/.test(dte);\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }())\n\t\t\t    \nfunction get(obj, prop) {\n\tvar parts = prop.split('.'),\n\t\tlast = parts.pop();\n\n\twhile ((prop = parts.shift())) {\n\t\tobj = obj[prop];\n\n\t\tif (obj == null) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn obj[last];\n}\n\nfunction noop() {\n\treturn '';\n}\n\nfunction Single(ds, col) {\n    if (ds.length === 0) return '';\n    return ds[0][col];\n}\n\nfunction SingleDate(ds, col, frmt) {\n    var gg = Single(ds, col);\n    return DateTime.Format(gg, frmt)\n}\n\nfunction groupBy(handlebars) {\n    var helpers = {\n        /**\n         * @method group\n         * @param {Array} list\n         * @param {Object} options\n         * @param {Object} options.hash\n         * @param {String} options.hash.by\n         * @return {String} Rendered partial.\n         */\n        group: function(list, options) {\n            options = options || {};\n\n            var fn = options.fn || noop,\n                inverse = options.inverse || noop,\n                hash = options.hash,\n                prop = hash && hash.by,\n                keys = [],\n                groups = {};\n\n            if (!prop || !list || !list.length) {\n                return inverse(this);\n            }\n\n            function groupKey(item) {\n                var key = get(item, prop);\n\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n\n                if (!groups[key]) {\n                    groups[key] = {\n                        value: key,\n                        items: []\n                    };\n                }\n\n                groups[key].items.push(item);\n            }\n\n            function renderGroup(buffer, key) {\n                return buffer + fn(groups[key]);\n            }\n\n            list.forEach(groupKey);\n\n            return keys.reduce(renderGroup, '');\n        }\n    };\n\n    handlebars.registerHelper(helpers);\n\n    return handlebars;\n}\n\nhandlebars.registerHelper(groupBy(handlebars));\n"}