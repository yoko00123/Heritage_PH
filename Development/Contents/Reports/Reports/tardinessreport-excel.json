{"shortid":"BkhUdApQm","name":"TardinessReport(Excel)","recipe":"html-to-xlsx","engine":"handlebars","content":"<style>\n   \n    table {\n        width: 100%; \n        /*border-collapse: collapse;*/\n    }\n    \n    /*thead > tr > th,  [border-bottom] {*/\n    /*    border-bottom: 1px solid black;*/\n    /*    padding-bottom:5px;*/\n    /*}*/\n    /*tfoot > tr > th, [border-top]{*/\n    /*    border-top: 1px  solid black;*/\n    /*    padding-top: 5px;*/\n    /*}*/\n    p {\n        font-size: 25;\n    }\n    \n    [center] {\n        text-align: center;\n    }\n    \n    [bold] {\n        font-weight: bold;\n    }\n    \n    [padding-20] {\n        padding-left : 20px;\n    }\n  [total]{\n      font-weight:bold;\n      font-size:25px;\n  }\n   [bot-border]{\n     border-bottom: 1px solid black;\n    font:10pt Verdana;\n    font-weight:bold;\n     \n  }\n  [padding-bot]{\n       padding-bottom:10px;\n       padding-left : 30px;\n  }\n  [top-margin]{\n      margin-top:35px;\n  }\n  /*thead { display: table-row-group } */\n</style>\n        <table>\n            \n <thead style=\"text-align:center; font:10pt Verdana;\">\n\n    <tr>\n    <th colspan=\"13\" style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">{{Single DataSource \"Company\"}} </th>\n    </tr>\n    <tr>\n    <th colspan=\"13\" style=\"border-style:none; text-align:center; color:black; font-size:12pt; padding-bottom:10px;\">Tardiness Report</th></tr>\n    <tr>\n    <th colspan=\"13\" style=\"border-style:none; text-align:center; color:black; font-weight:normal; font-size:10pt;\">{{SingleDate DataSource \"StartDate\" \"mmmm dd, yyyy\"}} - {{SingleDate DataSource \"EndDate\" \"mmmm dd, yyyy\"}}\n    </th>\n    </tr>\n\n  </thead>\n             <tr>\n                    <th>Employee Name</th>\n                    <th>Date</th>\n                    <th>Tardy</th>\n                    <th>Time In</th>\n                    <th>Remarks</th>\n                </tr>\n           \n            <tbody style=\"font:10pt Verdana; text-align:left;\">\n                 {{#group DataSource by =\"Employee\"}}\n                 <tr>\n                     <td>{{value}}</td>\n                 </tr>\n            {{#each items}}\n            <tr>\n                <td></td>\n                <td>{{FormatDate Date \"mmm dd, yyyy\"}}</td>\n                <td style=\"text-align:right;\">{{TARDY}}</td>\n                <td style=\"text-align:right;\">{{FormatDate ComputedTimeIn \"h:mm TT\"}}</td>\n              \n            </tr>\n            {{/each}}\n            <tr><td></td></tr> <tr><td></td></tr>\n            <tr style=\"\">\n                <td top-border></td>\n                <td top-border></td>\n                <td top-border></td>\n                <td top-border style=\"font:10pt Verdana; \">Count :</td>\n                <td top-border style=\"font:10pt Verdana; text-align:right; padding-right:30px;\">{{Sum items}}</td>\n            </tr>\n       {{/group}}\n       <tr><td></td></tr> <tr><td></td></tr>\n       <tr><td></td></tr> <tr><td></td></tr>\n         <tr>\n                <td top-border></td>\n                <td top-border></td>\n                <td top-border></td>\n                <td top-border></td>\n                <td top-border></td>\n            </tr>\n        <tr>\n                <td style=\"border-top: 1px solid black;\" top-border></td>\n                <td style=\"border-top: 1px solid black;\" top-border></td>\n                <td style=\"border-top: 1px solid black;\" top-border></td>\n                <td top-border style=\"font:10pt Verdana; border-top: 1px solid black; font-weight:bold; \">Grand Total :</td>\n                <td top-border style=\"font:bold 10pt Verdana; border-top: 1px solid black; text-align:right; padding-right:30px;\">{{GetGrandTotal}}</td>\n            </tr>\n          </tbody>\n        </table>","helpers":"var _grandtotal = 0;\nfunction Single(ds, col) {\n    if (ds.length === 0) return '';\n    return ds[0][col];\n}\n\nfunction SingleDate(ds, col, frmt) {\n    var gg = Single(ds, col);\n    return DateTime.Format(gg, frmt)\n}\n\nfunction FormatDate(dt, frmt) {\n    return DateTime.Format(dt, frmt);\n}\n\nfunction Sum(itms) {\n    _grandtotal += itms.length;\n    return itms.length;\n}\n\nfunction GetGrandTotal(){\n    return _grandtotal;\n}\n\nvar DateTime = (function() {\n    return {\n        Format: function() {\n            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n                timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n                timezoneClip = /[^-+\\dA-Z]/g,\n                pad = function(val, len) {\n                    val = String(val);\n                    len = len || 2;\n                    while (val.length < len) val = \"0\" + val;\n                    return val;\n                };\n\n            // Regexes and supporting functions are cached through closure\n            return function(date, mask, utc) {\n                //var dF = DateTime.Format;\n                if (DateTime.IsNewtonFormat(date))\n                    date = date.replace('T', ' ');\n\n                // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n                if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n                    mask = date;\n                    date = undefined;\n                }\n\n                // Passing date through Date applies Date.parse, if necessary\n                date = date ? new Date(date) : new Date;\n                if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n                //mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n                mask = String(DateTime.masks[mask] || mask || DateTime.masks['default']);\n\n                // Allow setting the utc argument via the mask\n                if (mask.slice(0, 4) == \"UTC:\") {\n                    mask = mask.slice(4);\n                    utc = true;\n                }\n\n                var _ = utc ? \"getUTC\" : \"get\",\n                    d = date[_ + \"Date\"](),\n                    D = date[_ + \"Day\"](),\n                    m = date[_ + \"Month\"](),\n                    y = date[_ + \"FullYear\"](),\n                    H = date[_ + \"Hours\"](),\n                    M = date[_ + \"Minutes\"](),\n                    s = date[_ + \"Seconds\"](),\n                    L = date[_ + \"Milliseconds\"](),\n                    o = utc ? 0 : date.getTimezoneOffset(),\n                    flags = {\n                        d: d,\n                        dd: pad(d),\n                        ddd: DateTime.i18n.dayNames[D], // dF.i18n.dayNames[D],\n                        dddd: DateTime.i18n.dayNames[D + 7],\n                        m: m + 1,\n                        mm: pad(m + 1),\n                        mmm: DateTime.i18n.monthNames[m],\n                        mmmm: DateTime.i18n.monthNames[m + 12],\n                        yy: String(y).slice(2),\n                        yyyy: y,\n                        h: H % 12 || 12,\n                        hh: pad(H % 12 || 12),\n                        H: H,\n                        HH: pad(H),\n                        M: M,\n                        MM: pad(M),\n                        s: s,\n                        ss: pad(s),\n                        l: pad(L, 3),\n                        L: pad(L > 99 ? Math.round(L / 10) : L),\n                        t: H < 12 ? \"a\" : \"p\",\n                        tt: H < 12 ? \"am\" : \"pm\",\n                        T: H < 12 ? \"A\" : \"P\",\n                        TT: H < 12 ? \"AM\" : \"PM\",\n                        Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                        o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                        S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                    };\n\n                return mask.replace(token, function($0) {\n                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n                });\n            };\n        }(),\n        masks: {\n            \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n            shortDate: \"m/d/yy\",\n            mediumDate: \"mmm dd, yyyy\",\n            longDate: \"mmmm d, yyyy\",\n            fullDate: \"dddd, mmmm d, yyyy\",\n            shortTime: \"h:MM TT\",\n            mediumTime: \"h:MM:ss TT\",\n            longTime: \"h:MM:ss TT Z\",\n            isoDate: \"yyyy-mm-dd\",\n            isoTime: \"HH:MM:ss\",\n            isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n            isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n            inSysDateTime: \"hh:MM TT mmm dd, yyyy\",\n            sometime: 'hhMMss',\n            shortDate2: \"mm/dd/yyyy\",\n            jDPInsysDate: \"M dd, yyyy\"\n        },\n        i18n: {\n            dayNames: [\n                \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n                \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n            ],\n            monthNames: [\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n            ]\n        },\n        JSONDate: function(jsonDate, format) {\n            //console.log(jsonDate.match(/\\d+/)[0]);\n\n            var d = new Date(parseInt(jsonDate.substr(6)));\n\n            return DateTime.Format(d, format);\n        },\n        ShortDate2: function(dateValue) {\n            date = new Date();\n\n            if (typeof dateValue != 'undefined')\n                date = dateValue;\n\n            return DateTime.Format(date, DateTime.masks.shortDate2)\n        },\n        Between: function(sdate, edate, callback, onFinish) {\n            try {\n                var i = 0;\n                var d = sdate;\n                while (true) {\n                    if (d >= edate) {\n                        onFinish();\n                        break;\n                    } else\n                        callback(i, d);\n\n                    d.setTime(d.getTime() + 86400000);\n                    i++;\n                }\n            } catch (ex) {\n                console.error('DateTime.Between', ex);\n            }\n        },\n        ToDate: function(jsonDate) {\n            return new Date(parseInt(jsonDate.substr(6)));\n        },\n        IsNewtonFormat: function(dte) {\n            return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})?.(\\d{1,3})?$/.test(dte);\n            //return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})+(.\\d{3})?$/.test(dte);\n        }\n    }\n}())\n\nfunction get(obj, prop) {\n    var parts = prop.split('.'),\n        last = parts.pop();\n\n    while ((prop = parts.shift())) {\n        obj = obj[prop];\n\n        if (obj == null) {\n            return;\n        }\n    }\n\n    return obj[last];\n}\n\nfunction noop() {\n    return '';\n}\n\nfunction groupBy(handlebars) {\n    var helpers = {\n        /**\n         * @method group\n         * @param {Array} list\n         * @param {Object} options\n         * @param {Object} options.hash\n         * @param {String} options.hash.by\n         * @return {String} Rendered partial.\n         */\n        group: function(list, options) {\n            options = options || {};\n\n            var fn = options.fn || noop,\n                inverse = options.inverse || noop,\n                hash = options.hash,\n                prop = hash && hash.by,\n                keys = [],\n                groups = {};\n\n            if (!prop || !list || !list.length) {\n                return inverse(this);\n            }\n\n            function groupKey(item) {\n                var key = get(item, prop);\n\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n\n                if (!groups[key]) {\n                    groups[key] = {\n                        value: key,\n                        items: []\n                    };\n                }\n\n                groups[key].items.push(item);\n            }\n\n            function renderGroup(buffer, key) {\n                return buffer + fn(groups[key]);\n            }\n\n            list.forEach(groupKey);\n\n            return keys.reduce(renderGroup, '');\n        }\n    };\n\n    handlebars.registerHelper(helpers);\n\n    return handlebars;\n}\n\nhandlebars.registerHelper(groupBy(handlebars));","modificationDate":"2018-07-19T09:22:54.434Z","_id":"cSG8N641LHHkSQZ3"}