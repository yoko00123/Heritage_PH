{"shortid":"S10xCSIg7","recipe":"phantom-pdf","engine":"handlebars","modificationDate":"2018-06-11T00:33:45.606Z","_id":"fuUsx8QAQ9SOGY6S","data":{"shortid":"BkD_EaDlQ"},"phantom":{"headerHeight":"3.5cm","header":"<center>\n<table border = \"0\">\n    <thead style=\"font-family: Verdana;\">\n        <tr>\n         {{!--<th style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">{{Single DataSource \"Company\"}} </th>--}}\n        </tr>\n        <tr>\n        <th style=\"border-style:none; text-align:center; color:black; font-size:12pt;\">Leave Credit Accrual and Usage Report</th></tr>\n     </thead>\n</table></center>","footer":""},"name":"LeaveCredit","content":"<style>\n    body {\n        font-family: 'verdana';\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        text-align: center;\n        font-weight: normal;\n    }\n\n    table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 11px;\n    }\n\n    thead>tr>th,\n    [border-bottom] {\n        /*border-bottom: 1px solid black; */\n        padding-bottom: 5px;\n    }\n\n    [center] {\n        text-align: center;\n    }\n\n    [bold] {\n        font-weight: bold;\n    }\n\n    [padding-20] {\n        padding-left: 50px;\n    }\n\n    [fixcellwidth] {\n        min-width: 80px;\n        max-width: 80px;\n    }\n\n    [left] {\n        text-align: left;\n        padding: 5px;\n    }\n\n    [right] {\n        text-align: right;\n        padding: 5px;\n    }\n\n    [headerbar] {\n        border-top: 2px solid black;\n    }\n\n    [footerbar] {\n        border-bottom: 2px solid black;\n    }\n\n    [footerbar-small] {\n        border-bottom: 1px solid black;\n    }\n\n    [margin-top] {\n        margin-top: 5px;\n    }\n\n    [margin-20] {\n        margin: 20 0px;\n    }\n\n    [margin-left-20] {\n        margin-left: 20px;\n    }\n\n    [margin-left-50] {\n        margin-left: 50px;\n    }\n\n    [margin-right-20] {\n        margin-right: 20px;\n    }\n\n    [margin-bottom-100] {\n        margin-bottom: 80px;\n    }\n\n    [fix-height] {\n        height: 400px;\n    }\n\n    [page-break] {\n        page-break-after: always;\n    }\n</style>\n  {{#each DataSource}}\n \n    <table style=\"font:10pt verdana;\">\n        <thead>\n        <tr>\n            <td bold>Employee Code: </td>\n            <td>{{EmpCode}}</td>\n            \n        </tr>\n        <tr>\n            <td bold>Employee: </td>\n            <td>{{Employee}}</td>\n           \n        </tr>\n          </thead>\n          <tbody>\n        <tr>\n          \n            <td colspan=\"2\" valign=\"top\" >\n                <div style=\"font:10pt Verdana;\" margin-20 fix-height margin-right-20>\n                    <table style=\"font:10pt Verdana;\">\n                        <tr bold headerbar footerbar>\n                            <th></th>\n                            <th style=\"font-weight:bold; font:10pt Verdana;\" left>Date</th>\n                            <th></th>\n                            <th style=\"font-weight:bold; font:10pt Verdana;\" right> Accrual</th>\n                           \n                        </tr>\n                        {{#eachfilter ../Accrual (concat '$.ID_LeavePayrollItem ==' ID) }}\n                        <tr>\n                            <td left>{{PayrollItem}}</td>  \n                        </tr>\n                        <tr>\n                            <td right></td>\n                            <td >{{FormatDate Date \"mmm dd, yyyy\"}}</td>\n                            <td> - </td>\n                            <td right>{{Alloted}}</td>\n                            <td right></td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td>Total: </td>\n                            <td>{{Used}}</td>\n                            <td right>Balance: {{Balance}}</td>\n                        </tr>\n                        \n                        {{/eachfilter}}\n                    </table>\n                </div>\n            </td>\n            <td colspan=\"2\" valign=\"top\">\n                <div  margin-20 fix-height margin-left-20>\n                    <table style=\"font:10pt Verdana;\">\n                        <tr bold headerbar footerbar>\n                            <th></th>\n                            <th left>Date</th>\n                            <th right>Usage</th>\n                            <th></th>\n                        </tr>\n                        {{#eachfilter ../Usage (concat '$.ID_LeavePayrollItem ==' ID) }}\n                        <tr>\n                            <td left>{{PayrollItem}}</td>  \n                        </tr>\n                        <tr>\n                            <td right></td>\n                            <td >{{FormatDate Date \"mmm dd, yyyy\"}}</td>\n                            <td right>{{Used}}</td>\n                            <td right></td>\n                        </tr>\n                        {{/eachfilter}}\n                    </table>\n                </div>\n            </td>\n        </tr>\n    </table>\n        <table style=\"page-break-after:always;\"></table>\n    {{/each}}\n","helpers":" function Count(lst) {\n     return lst.length;\n }\n\n function Single(ds, col) {\n     if (ds.length === 0) return '';\n     return ds[0][col];\n }\n\n function SingleDate(ds, col, frmt) {\n     var gg = Single(ds, col);\n     return DateTime.Format(gg, frmt)\n }\n\n function FormatDate(dt, frmt) {\n     if (dt === null) return '';\n     return DateTime.Format(dt, frmt);\n }\n\n var DateTime = (function() {\n     return {\n         Format: function() {\n             var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n                 timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n                 timezoneClip = /[^-+\\dA-Z]/g,\n                 pad = function(val, len) {\n                     val = String(val);\n                     len = len || 2;\n                     while (val.length < len) val = \"0\" + val;\n                     return val;\n                 };\n\n             // Regexes and supporting functions are cached through closure\n             return function(date, mask, utc) {\n                 //var dF = DateTime.Format;\n                 if (DateTime.IsNewtonFormat(date))\n                     date = date.replace('T', ' ');\n\n                 // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n                 if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n                     mask = date;\n                     date = undefined;\n                 }\n\n                 // Passing date through Date applies Date.parse, if necessary\n                 date = date ? new Date(date) : new Date;\n                 if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n                 //mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n                 mask = String(DateTime.masks[mask] || mask || DateTime.masks['default']);\n\n                 // Allow setting the utc argument via the mask\n                 if (mask.slice(0, 4) == \"UTC:\") {\n                     mask = mask.slice(4);\n                     utc = true;\n                 }\n\n                 var _ = utc ? \"getUTC\" : \"get\",\n                     d = date[_ + \"Date\"](),\n                     D = date[_ + \"Day\"](),\n                     m = date[_ + \"Month\"](),\n                     y = date[_ + \"FullYear\"](),\n                     H = date[_ + \"Hours\"](),\n                     M = date[_ + \"Minutes\"](),\n                     s = date[_ + \"Seconds\"](),\n                     L = date[_ + \"Milliseconds\"](),\n                     o = utc ? 0 : date.getTimezoneOffset(),\n                     flags = {\n                         d: d,\n                         dd: pad(d),\n                         ddd: DateTime.i18n.dayNames[D], // dF.i18n.dayNames[D],\n                         dddd: DateTime.i18n.dayNames[D + 7],\n                         m: m + 1,\n                         mm: pad(m + 1),\n                         mmm: DateTime.i18n.monthNames[m],\n                         mmmm: DateTime.i18n.monthNames[m + 12],\n                         yy: String(y).slice(2),\n                         yyyy: y,\n                         h: H % 12 || 12,\n                         hh: pad(H % 12 || 12),\n                         H: H,\n                         HH: pad(H),\n                         M: M,\n                         MM: pad(M),\n                         s: s,\n                         ss: pad(s),\n                         l: pad(L, 3),\n                         L: pad(L > 99 ? Math.round(L / 10) : L),\n                         t: H < 12 ? \"a\" : \"p\",\n                         tt: H < 12 ? \"am\" : \"pm\",\n                         T: H < 12 ? \"A\" : \"P\",\n                         TT: H < 12 ? \"AM\" : \"PM\",\n                         Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                         o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                         S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                     };\n\n                 return mask.replace(token, function($0) {\n                     return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n                 });\n             };\n         }(),\n         masks: {\n             \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n             shortDate: \"m/d/yy\",\n             mediumDate: \"mmm dd, yyyy\",\n             longDate: \"mmmm d, yyyy\",\n             fullDate: \"dddd, mmmm d, yyyy\",\n             shortTime: \"h:MM TT\",\n             mediumTime: \"h:MM:ss TT\",\n             longTime: \"h:MM:ss TT Z\",\n             isoDate: \"yyyy-mm-dd\",\n             isoTime: \"HH:MM:ss\",\n             isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n             isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n             inSysDateTime: \"hh:MM TT mmm dd, yyyy\",\n             sometime: 'hhMMss',\n             shortDate2: \"mm/dd/yyyy\",\n             jDPInsysDate: \"M dd, yyyy\"\n         },\n         i18n: {\n             dayNames: [\n                 \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n                 \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n             ],\n             monthNames: [\n                 \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n                 \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n             ]\n         },\n         JSONDate: function(jsonDate, format) {\n             //console.log(jsonDate.match(/\\d+/)[0]);\n\n             var d = new Date(parseInt(jsonDate.substr(6)));\n\n             return DateTime.Format(d, format);\n         },\n         ShortDate2: function(dateValue) {\n             date = new Date();\n\n             if (typeof dateValue != 'undefined')\n                 date = dateValue;\n\n             return DateTime.Format(date, DateTime.masks.shortDate2)\n         },\n         Between: function(sdate, edate, callback, onFinish) {\n             try {\n                 var i = 0;\n                 var d = sdate;\n                 while (true) {\n                     if (d >= edate) {\n                         onFinish();\n                         break;\n                     } else\n                         callback(i, d);\n\n                     d.setTime(d.getTime() + 86400000);\n                     i++;\n                 }\n             } catch (ex) {\n                 console.error('DateTime.Between', ex);\n             }\n         },\n         ToDate: function(jsonDate) {\n             return new Date(parseInt(jsonDate.substr(6)));\n         },\n         IsNewtonFormat: function(dte) {\n             return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})?.(\\d{1,3})?$/.test(dte);\n             //return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})+(.\\d{3})?$/.test(dte);\n         }\n     }\n }())\n\n function get(obj, prop) {\n     var parts = prop.split('.'),\n         last = parts.pop();\n\n     while ((prop = parts.shift())) {\n         obj = obj[prop];\n\n         if (obj == null) {\n             return;\n         }\n     }\n\n     return obj[last];\n }\n\n function noop() {\n     return '';\n }\n\n function groupBy(handlebars) {\n     var helpers = {\n         /**\n          * @method group\n          * @param {Array} list\n          * @param {Object} options\n          * @param {Object} options.hash\n          * @param {String} options.hash.by\n          * @return {String} Rendered partial.\n          */\n         group: function(list, options) {\n             options = options || {};\n\n             var fn = options.fn || noop,\n                 inverse = options.inverse || noop,\n                 hash = options.hash,\n                 prop = hash && hash.by,\n                 keys = [],\n                 groups = {};\n\n             if (!prop || !list || !list.length) {\n                 return inverse(this);\n             }\n\n             function groupKey(item) {\n                 var key = get(item, prop);\n\n                 if (keys.indexOf(key) === -1) {\n                     keys.push(key);\n                 }\n\n                 if (!groups[key]) {\n                     groups[key] = {\n                         value: key,\n                         items: []\n                     };\n                 }\n\n                 groups[key].items.push(item);\n             }\n\n             function renderGroup(buffer, key) {\n                 return buffer + fn(groups[key]);\n             }\n\n             list.forEach(groupKey);\n\n             return keys.reduce(renderGroup, '');\n         }\n     };\n\n     handlebars.registerHelper(helpers);\n\n     return handlebars;\n }\n\n handlebars.registerHelper(groupBy(handlebars));\n\n function formatNumber(x, decimal) {\n     var parts = parseFloat(x).toFixed(decimal || 2).toString().split(\".\");\n     parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n     return parts.join(\".\");\n }\n\n function SingleNumber(ds, col, decimal) {\n     var gg = Single(ds, col);\n     return gg == '' ? '-' : formatNumber(gg, decimal);\n }\n\n function concat() {\n     var arg = Array.prototype.slice.call(arguments, 0);\n     arg.pop();\n     return arg.join('');\n }\n\n handlebars.registerHelper('eachfilter', function(list, fltr, options) {\n     var ret = '';\n     Enumerable.From(list).Where(fltr).ForEach(function(x) {\n         ret += options.fn(x);\n     });\n     return ret;\n });\n\n handlebars.registerHelper('withfilter', function(list, fltr, options) {\n     var ret = '';\n     var gg = Enumerable.From(list).Where(fltr);\n     if (gg.Any()) {\n         ret = options.fn(gg.FirstOrDefault());\n     }\n     return ret;\n });\n\n Enumerable = function() {\n     var m = \"Single:sequence contains more than one element.\",\n         e = true,\n         b = null,\n         a = false,\n         c = function(a) {\n             this.GetEnumerator = a\n         };\n     c.Choice = function() {\n         var a = arguments[0] instanceof Array ? arguments[0] : arguments;\n         return new c(function() {\n             return new f(g.Blank, function() {\n                 return this.Yield(a[Math.floor(Math.random() * a.length)])\n             }, g.Blank)\n         })\n     };\n     c.Cycle = function() {\n         var a = arguments[0] instanceof Array ? arguments[0] : arguments;\n         return new c(function() {\n             var b = 0;\n             return new f(g.Blank, function() {\n                 if (b >= a.length) b = 0;\n                 return this.Yield(a[b++])\n             }, g.Blank)\n         })\n     };\n     c.Empty = function() {\n         return new c(function() {\n             return new f(g.Blank, function() {\n                 return a\n             }, g.Blank)\n         })\n     };\n     c.From = function(j) {\n         if (j == b) return c.Empty();\n         if (j instanceof c) return j;\n         if (typeof j == i.Number || typeof j == i.Boolean) return c.Repeat(j, 1);\n         if (typeof j == i.String) return new c(function() {\n             var b = 0;\n             return new f(g.Blank, function() {\n                 return b < j.length ? this.Yield(j.charAt(b++)) : a\n             }, g.Blank)\n         });\n         if (typeof j != i.Function) {\n             if (typeof j.length == i.Number) return new h(j);\n             if (!(j instanceof Object) && d.IsIEnumerable(j)) return new c(function() {\n                 var c = e,\n                     b;\n                 return new f(function() {\n                     b = new Enumerator(j)\n                 }, function() {\n                     if (c) c = a;\n                     else b.moveNext();\n                     return b.atEnd() ? a : this.Yield(b.item())\n                 }, g.Blank)\n             })\n         }\n         return new c(function() {\n             var b = [],\n                 c = 0;\n             return new f(function() {\n                 for (var a in j) !(j[a] instanceof Function) && b.push({\n                     Key: a,\n                     Value: j[a]\n                 })\n             }, function() {\n                 return c < b.length ? this.Yield(b[c++]) : a\n             }, g.Blank)\n         })\n     }, c.Return = function(a) {\n         return c.Repeat(a, 1)\n     };\n     c.Matches = function(h, e, d) {\n         if (d == b) d = \"\";\n         if (e instanceof RegExp) {\n             d += e.ignoreCase ? \"i\" : \"\";\n             d += e.multiline ? \"m\" : \"\";\n             e = e.source\n         }\n         if (d.indexOf(\"g\") === -1) d += \"g\";\n         return new c(function() {\n             var b;\n             return new f(function() {\n                 b = new RegExp(e, d)\n             }, function() {\n                 var c = b.exec(h);\n                 return c ? this.Yield(c) : a\n             }, g.Blank)\n         })\n     };\n     c.Range = function(e, d, a) {\n         if (a == b) a = 1;\n         return c.ToInfinity(e, a).Take(d)\n     };\n     c.RangeDown = function(e, d, a) {\n         if (a == b) a = 1;\n         return c.ToNegativeInfinity(e, a).Take(d)\n     };\n     c.RangeTo = function(d, e, a) {\n         if (a == b) a = 1;\n         return d < e ? c.ToInfinity(d, a).TakeWhile(function(a) {\n             return a <= e\n         }) : c.ToNegativeInfinity(d, a).TakeWhile(function(a) {\n             return a >= e\n         })\n     };\n     c.Repeat = function(d, a) {\n         return a != b ? c.Repeat(d).Take(a) : new c(function() {\n             return new f(g.Blank, function() {\n                 return this.Yield(d)\n             }, g.Blank)\n         })\n     };\n     c.RepeatWithFinalize = function(a, e) {\n         a = d.CreateLambda(a);\n         e = d.CreateLambda(e);\n         return new c(function() {\n             var c;\n             return new f(function() {\n                 c = a()\n             }, function() {\n                 return this.Yield(c)\n             }, function() {\n                 if (c != b) {\n                     e(c);\n                     c = b\n                 }\n             })\n         })\n     };\n     c.Generate = function(a, e) {\n         if (e != b) return c.Generate(a).Take(e);\n         a = d.CreateLambda(a);\n         return new c(function() {\n             return new f(g.Blank, function() {\n                 return this.Yield(a())\n             }, g.Blank)\n         })\n     };\n     c.ToInfinity = function(d, a) {\n         if (d == b) d = 0;\n         if (a == b) a = 1;\n         return new c(function() {\n             var b;\n             return new f(function() {\n                 b = d - a\n             }, function() {\n                 return this.Yield(b += a)\n             }, g.Blank)\n         })\n     };\n     c.ToNegativeInfinity = function(d, a) {\n         if (d == b) d = 0;\n         if (a == b) a = 1;\n         return new c(function() {\n             var b;\n             return new f(function() {\n                 b = d + a\n             }, function() {\n                 return this.Yield(b -= a)\n             }, g.Blank)\n         })\n     };\n     c.Unfold = function(h, b) {\n         b = d.CreateLambda(b);\n         return new c(function() {\n             var d = e,\n                 c;\n             return new f(g.Blank, function() {\n                 if (d) {\n                     d = a;\n                     c = h;\n                     return this.Yield(c)\n                 }\n                 c = b(c);\n                 return this.Yield(c)\n             }, g.Blank)\n         })\n     };\n     c.prototype = {\n         CascadeBreadthFirst: function(g, b) {\n             var h = this;\n             g = d.CreateLambda(g);\n             b = d.CreateLambda(b);\n             return new c(function() {\n                 var i, k = 0,\n                     j = [];\n                 return new f(function() {\n                     i = h.GetEnumerator()\n                 }, function() {\n                     while (e) {\n                         if (i.MoveNext()) {\n                             j.push(i.Current());\n                             return this.Yield(b(i.Current(), k))\n                         }\n                         var f = c.From(j).SelectMany(function(a) {\n                             return g(a)\n                         });\n                         if (!f.Any()) return a;\n                         else {\n                             k++;\n                             j = [];\n                             d.Dispose(i);\n                             i = f.GetEnumerator()\n                         }\n                     }\n                 }, function() {\n                     d.Dispose(i)\n                 })\n             })\n         },\n         CascadeDepthFirst: function(g, b) {\n             var h = this;\n             g = d.CreateLambda(g);\n             b = d.CreateLambda(b);\n             return new c(function() {\n                 var j = [],\n                     i;\n                 return new f(function() {\n                     i = h.GetEnumerator()\n                 }, function() {\n                     while (e) {\n                         if (i.MoveNext()) {\n                             var f = b(i.Current(), j.length);\n                             j.push(i);\n                             i = c.From(g(i.Current())).GetEnumerator();\n                             return this.Yield(f)\n                         }\n                         if (j.length <= 0) return a;\n                         d.Dispose(i);\n                         i = j.pop()\n                     }\n                 }, function() {\n                     try {\n                         d.Dispose(i)\n                     } finally {\n                         c.From(j).ForEach(function(a) {\n                             a.Dispose()\n                         })\n                     }\n                 })\n             })\n         },\n         Flatten: function() {\n             var h = this;\n             return new c(function() {\n                 var j, i = b;\n                 return new f(function() {\n                     j = h.GetEnumerator()\n                 }, function() {\n                     while (e) {\n                         if (i != b)\n                             if (i.MoveNext()) return this.Yield(i.Current());\n                             else i = b;\n                         if (j.MoveNext())\n                             if (j.Current() instanceof Array) {\n                                 d.Dispose(i);\n                                 i = c.From(j.Current()).SelectMany(g.Identity).Flatten().GetEnumerator();\n                                 continue\n                             } else return this.Yield(j.Current());\n                         return a\n                     }\n                 }, function() {\n                     try {\n                         d.Dispose(j)\n                     } finally {\n                         d.Dispose(i)\n                     }\n                 })\n             })\n         },\n         Pairwise: function(b) {\n             var e = this;\n             b = d.CreateLambda(b);\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = e.GetEnumerator();\n                     c.MoveNext()\n                 }, function() {\n                     var d = c.Current();\n                     return c.MoveNext() ? this.Yield(b(d, c.Current())) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         Scan: function(i, g, j) {\n             if (j != b) return this.Scan(i, g).Select(j);\n             var h;\n             if (g == b) {\n                 g = d.CreateLambda(i);\n                 h = a\n             } else {\n                 g = d.CreateLambda(g);\n                 h = e\n             }\n             var k = this;\n             return new c(function() {\n                 var b, c, j = e;\n                 return new f(function() {\n                     b = k.GetEnumerator()\n                 }, function() {\n                     if (j) {\n                         j = a;\n                         if (!h) {\n                             if (b.MoveNext()) return this.Yield(c = b.Current())\n                         } else return this.Yield(c = i)\n                     }\n                     return b.MoveNext() ? this.Yield(c = g(c, b.Current())) : a\n                 }, function() {\n                     d.Dispose(b)\n                 })\n             })\n         },\n         Select: function(b) {\n             var e = this;\n             b = d.CreateLambda(b);\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     return c.MoveNext() ? this.Yield(b(c.Current(), g++)) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         SelectMany: function(g, e) {\n             var h = this;\n             g = d.CreateLambda(g);\n             if (e == b) e = function(b, a) {\n                 return a\n             };\n             e = d.CreateLambda(e);\n             return new c(function() {\n                 var j, i = undefined,\n                     k = 0;\n                 return new f(function() {\n                     j = h.GetEnumerator()\n                 }, function() {\n                     if (i === undefined)\n                         if (!j.MoveNext()) return a;\n                     do {\n                         if (i == b) {\n                             var f = g(j.Current(), k++);\n                             i = c.From(f).GetEnumerator()\n                         }\n                         if (i.MoveNext()) return this.Yield(e(j.Current(), i.Current()));\n                         d.Dispose(i);\n                         i = b\n                     } while (j.MoveNext());\n                     return a\n                 }, function() {\n                     try {\n                         d.Dispose(j)\n                     } finally {\n                         d.Dispose(i)\n                     }\n                 })\n             })\n         },\n         Where: function(b) {\n             b = d.CreateLambda(b);\n             var e = this;\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     while (c.MoveNext())\n                         if (b(c.Current(), g++)) return this.Yield(c.Current());\n                     return a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         OfType: function(c) {\n             var a;\n             switch (c) {\n                 case Number:\n                     a = i.Number;\n                     break;\n                 case String:\n                     a = i.String;\n                     break;\n                 case Boolean:\n                     a = i.Boolean;\n                     break;\n                 case Function:\n                     a = i.Function;\n                     break;\n                 default:\n                     a = b\n             }\n             return a === b ? this.Where(function(a) {\n                 return a instanceof c\n             }) : this.Where(function(b) {\n                 return typeof b === a\n             })\n         },\n         Zip: function(e, b) {\n             b = d.CreateLambda(b);\n             var g = this;\n             return new c(function() {\n                 var i, h, j = 0;\n                 return new f(function() {\n                     i = g.GetEnumerator();\n                     h = c.From(e).GetEnumerator()\n                 }, function() {\n                     return i.MoveNext() && h.MoveNext() ? this.Yield(b(i.Current(), h.Current(), j++)) : a\n                 }, function() {\n                     try {\n                         d.Dispose(i)\n                     } finally {\n                         d.Dispose(h)\n                     }\n                 })\n             })\n         },\n         Join: function(m, i, h, k, j) {\n             i = d.CreateLambda(i);\n             h = d.CreateLambda(h);\n             k = d.CreateLambda(k);\n             j = d.CreateLambda(j);\n             var l = this;\n             return new c(function() {\n                 var n, q, o = b,\n                     p = 0;\n                 return new f(function() {\n                     n = l.GetEnumerator();\n                     q = c.From(m).ToLookup(h, g.Identity, j)\n                 }, function() {\n                     while (e) {\n                         if (o != b) {\n                             var c = o[p++];\n                             if (c !== undefined) return this.Yield(k(n.Current(), c));\n                             c = b;\n                             p = 0\n                         }\n                         if (n.MoveNext()) {\n                             var d = i(n.Current());\n                             o = q.Get(d).ToArray()\n                         } else return a\n                     }\n                 }, function() {\n                     d.Dispose(n)\n                 })\n             })\n         },\n         GroupJoin: function(l, h, e, j, i) {\n             h = d.CreateLambda(h);\n             e = d.CreateLambda(e);\n             j = d.CreateLambda(j);\n             i = d.CreateLambda(i);\n             var k = this;\n             return new c(function() {\n                 var m = k.GetEnumerator(),\n                     n = b;\n                 return new f(function() {\n                     m = k.GetEnumerator();\n                     n = c.From(l).ToLookup(e, g.Identity, i)\n                 }, function() {\n                     if (m.MoveNext()) {\n                         var b = n.Get(h(m.Current()));\n                         return this.Yield(j(m.Current(), b))\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(m)\n                 })\n             })\n         },\n         All: function(b) {\n             b = d.CreateLambda(b);\n             var c = e;\n             this.ForEach(function(d) {\n                 if (!b(d)) {\n                     c = a;\n                     return a\n                 }\n             });\n             return c\n         },\n         Any: function(c) {\n             c = d.CreateLambda(c);\n             var b = this.GetEnumerator();\n             try {\n                 if (arguments.length == 0) return b.MoveNext();\n                 while (b.MoveNext())\n                     if (c(b.Current())) return e;\n                 return a\n             } finally {\n                 d.Dispose(b)\n             }\n         },\n         Concat: function(e) {\n             var g = this;\n             return new c(function() {\n                 var i, h;\n                 return new f(function() {\n                     i = g.GetEnumerator()\n                 }, function() {\n                     if (h == b) {\n                         if (i.MoveNext()) return this.Yield(i.Current());\n                         h = c.From(e).GetEnumerator()\n                     }\n                     return h.MoveNext() ? this.Yield(h.Current()) : a\n                 }, function() {\n                     try {\n                         d.Dispose(i)\n                     } finally {\n                         d.Dispose(h)\n                     }\n                 })\n             })\n         },\n         Insert: function(h, b) {\n             var g = this;\n             return new c(function() {\n                 var j, i, l = 0,\n                     k = a;\n                 return new f(function() {\n                     j = g.GetEnumerator();\n                     i = c.From(b).GetEnumerator()\n                 }, function() {\n                     if (l == h && i.MoveNext()) {\n                         k = e;\n                         return this.Yield(i.Current())\n                     }\n                     if (j.MoveNext()) {\n                         l++;\n                         return this.Yield(j.Current())\n                     }\n                     return !k && i.MoveNext() ? this.Yield(i.Current()) : a\n                 }, function() {\n                     try {\n                         d.Dispose(j)\n                     } finally {\n                         d.Dispose(i)\n                     }\n                 })\n             })\n         },\n         Alternate: function(a) {\n             a = c.Return(a);\n             return this.SelectMany(function(b) {\n                 return c.Return(b).Concat(a)\n             }).TakeExceptLast()\n         },\n         Contains: function(f, b) {\n             b = d.CreateLambda(b);\n             var c = this.GetEnumerator();\n             try {\n                 while (c.MoveNext())\n                     if (b(c.Current()) === f) return e;\n                 return a\n             } finally {\n                 d.Dispose(c)\n             }\n         },\n         DefaultIfEmpty: function(b) {\n             var g = this;\n             return new c(function() {\n                 var c, h = e;\n                 return new f(function() {\n                     c = g.GetEnumerator()\n                 }, function() {\n                     if (c.MoveNext()) {\n                         h = a;\n                         return this.Yield(c.Current())\n                     } else if (h) {\n                         h = a;\n                         return this.Yield(b)\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         Distinct: function(a) {\n             return this.Except(c.Empty(), a)\n         },\n         Except: function(e, b) {\n             b = d.CreateLambda(b);\n             var g = this;\n             return new c(function() {\n                 var h, i;\n                 return new f(function() {\n                     h = g.GetEnumerator();\n                     i = new n(b);\n                     c.From(e).ForEach(function(a) {\n                         i.Add(a)\n                     })\n                 }, function() {\n                     while (h.MoveNext()) {\n                         var b = h.Current();\n                         if (!i.Contains(b)) {\n                             i.Add(b);\n                             return this.Yield(b)\n                         }\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(h)\n                 })\n             })\n         },\n         Intersect: function(e, b) {\n             b = d.CreateLambda(b);\n             var g = this;\n             return new c(function() {\n                 var h, i, j;\n                 return new f(function() {\n                     h = g.GetEnumerator();\n                     i = new n(b);\n                     c.From(e).ForEach(function(a) {\n                         i.Add(a)\n                     });\n                     j = new n(b)\n                 }, function() {\n                     while (h.MoveNext()) {\n                         var b = h.Current();\n                         if (!j.Contains(b) && i.Contains(b)) {\n                             j.Add(b);\n                             return this.Yield(b)\n                         }\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(h)\n                 })\n             })\n         },\n         SequenceEqual: function(h, f) {\n             f = d.CreateLambda(f);\n             var g = this.GetEnumerator();\n             try {\n                 var b = c.From(h).GetEnumerator();\n                 try {\n                     while (g.MoveNext())\n                         if (!b.MoveNext() || f(g.Current()) !== f(b.Current())) return a;\n                     return b.MoveNext() ? a : e\n                 } finally {\n                     d.Dispose(b)\n                 }\n             } finally {\n                 d.Dispose(g)\n             }\n         },\n         Union: function(e, b) {\n             b = d.CreateLambda(b);\n             var g = this;\n             return new c(function() {\n                 var j, h, i;\n                 return new f(function() {\n                     j = g.GetEnumerator();\n                     i = new n(b)\n                 }, function() {\n                     var b;\n                     if (h === undefined) {\n                         while (j.MoveNext()) {\n                             b = j.Current();\n                             if (!i.Contains(b)) {\n                                 i.Add(b);\n                                 return this.Yield(b)\n                             }\n                         }\n                         h = c.From(e).GetEnumerator()\n                     }\n                     while (h.MoveNext()) {\n                         b = h.Current();\n                         if (!i.Contains(b)) {\n                             i.Add(b);\n                             return this.Yield(b)\n                         }\n                     }\n                     return a\n                 }, function() {\n                     try {\n                         d.Dispose(j)\n                     } finally {\n                         d.Dispose(h)\n                     }\n                 })\n             })\n         },\n         OrderBy: function(b) {\n             return new j(this, b, a)\n         },\n         OrderByDescending: function(a) {\n             return new j(this, a, e)\n         },\n         Reverse: function() {\n             var b = this;\n             return new c(function() {\n                 var c, d;\n                 return new f(function() {\n                     c = b.ToArray();\n                     d = c.length\n                 }, function() {\n                     return d > 0 ? this.Yield(c[--d]) : a\n                 }, g.Blank)\n             })\n         },\n         Shuffle: function() {\n             var b = this;\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = b.ToArray()\n                 }, function() {\n                     if (c.length > 0) {\n                         var b = Math.floor(Math.random() * c.length);\n                         return this.Yield(c.splice(b, 1)[0])\n                     }\n                     return a\n                 }, g.Blank)\n             })\n         },\n         GroupBy: function(i, h, e, g) {\n             var j = this;\n             i = d.CreateLambda(i);\n             h = d.CreateLambda(h);\n             if (e != b) e = d.CreateLambda(e);\n             g = d.CreateLambda(g);\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = j.ToLookup(i, h, g).ToEnumerable().GetEnumerator()\n                 }, function() {\n                     while (c.MoveNext()) return e == b ? this.Yield(c.Current()) : this.Yield(e(c.Current().Key(), c.Current()));\n                     return a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         PartitionBy: function(j, i, g, h) {\n             var l = this;\n             j = d.CreateLambda(j);\n             i = d.CreateLambda(i);\n             h = d.CreateLambda(h);\n             var k;\n             if (g == b) {\n                 k = a;\n                 g = function(b, a) {\n                     return new o(b, a)\n                 }\n             } else {\n                 k = e;\n                 g = d.CreateLambda(g)\n             }\n             return new c(function() {\n                 var b, n, o, m = [];\n                 return new f(function() {\n                     b = l.GetEnumerator();\n                     if (b.MoveNext()) {\n                         n = j(b.Current());\n                         o = h(n);\n                         m.push(i(b.Current()))\n                     }\n                 }, function() {\n                     var d;\n                     while ((d = b.MoveNext()) == e)\n                         if (o === h(j(b.Current()))) m.push(i(b.Current()));\n                         else break;\n                     if (m.length > 0) {\n                         var f = k ? g(n, c.From(m)) : g(n, m);\n                         if (d) {\n                             n = j(b.Current());\n                             o = h(n);\n                             m = [i(b.Current())]\n                         } else m = [];\n                         return this.Yield(f)\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(b)\n                 })\n             })\n         },\n         BufferWithCount: function(e) {\n             var b = this;\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = b.GetEnumerator()\n                 }, function() {\n                     var b = [],\n                         d = 0;\n                     while (c.MoveNext()) {\n                         b.push(c.Current());\n                         if (++d >= e) return this.Yield(b)\n                     }\n                     return b.length > 0 ? this.Yield(b) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         Aggregate: function(c, b, a) {\n             return this.Scan(c, b, a).Last()\n         },\n         Average: function(a) {\n             a = d.CreateLambda(a);\n             var c = 0,\n                 b = 0;\n             this.ForEach(function(d) {\n                 c += a(d);\n                 ++b\n             });\n             return c / b\n         },\n         Count: function(a) {\n             a = a == b ? g.True : d.CreateLambda(a);\n             var c = 0;\n             this.ForEach(function(d, b) {\n                 if (a(d, b)) ++c\n             });\n             return c\n         },\n         Max: function(a) {\n             if (a == b) a = g.Identity;\n             return this.Select(a).Aggregate(function(a, b) {\n                 return a > b ? a : b\n             })\n         },\n         Min: function(a) {\n             if (a == b) a = g.Identity;\n             return this.Select(a).Aggregate(function(a, b) {\n                 return a < b ? a : b\n             })\n         },\n         MaxBy: function(a) {\n             a = d.CreateLambda(a);\n             return this.Aggregate(function(b, c) {\n                 return a(b) > a(c) ? b : c\n             })\n         },\n         MinBy: function(a) {\n             a = d.CreateLambda(a);\n             return this.Aggregate(function(b, c) {\n                 return a(b) < a(c) ? b : c\n             })\n         },\n         Sum: function(a) {\n             if (a == b) a = g.Identity;\n             return this.Select(a).Aggregate(0, function(a, b) {\n                 return a + b\n             })\n         },\n         ElementAt: function(d) {\n             var c, b = a;\n             this.ForEach(function(g, f) {\n                 if (f == d) {\n                     c = g;\n                     b = e;\n                     return a\n                 }\n             });\n             if (!b) throw new Error(\"index is less than 0 or greater than or equal to the number of elements in source.\");\n             return c\n         },\n         ElementAtOrDefault: function(f, d) {\n             var c, b = a;\n             this.ForEach(function(g, d) {\n                 if (d == f) {\n                     c = g;\n                     b = e;\n                     return a\n                 }\n             });\n             return !b ? d : c\n         },\n         First: function(c) {\n             if (c != b) return this.Where(c).First();\n             var f, d = a;\n             this.ForEach(function(b) {\n                 f = b;\n                 d = e;\n                 return a\n             });\n             if (!d) throw new Error(\"First:No element satisfies the condition.\");\n             return f\n         },\n         FirstOrDefault: function(c, d) {\n             if (d != b) return this.Where(d).FirstOrDefault(c);\n             var g, f = a;\n             this.ForEach(function(b) {\n                 g = b;\n                 f = e;\n                 return a\n             });\n             return !f ? c : g\n         },\n         Last: function(c) {\n             if (c != b) return this.Where(c).Last();\n             var f, d = a;\n             this.ForEach(function(a) {\n                 d = e;\n                 f = a\n             });\n             if (!d) throw new Error(\"Last:No element satisfies the condition.\");\n             return f\n         },\n         LastOrDefault: function(c, d) {\n             if (d != b) return this.Where(d).LastOrDefault(c);\n             var g, f = a;\n             this.ForEach(function(a) {\n                 f = e;\n                 g = a\n             });\n             return !f ? c : g\n         },\n         Single: function(d) {\n             if (d != b) return this.Where(d).Single();\n             var f, c = a;\n             this.ForEach(function(a) {\n                 if (!c) {\n                     c = e;\n                     f = a\n                 } else throw new Error(m);\n             });\n             if (!c) throw new Error(\"Single:No element satisfies the condition.\");\n             return f\n         },\n         SingleOrDefault: function(d, f) {\n             if (f != b) return this.Where(f).SingleOrDefault(d);\n             var g, c = a;\n             this.ForEach(function(a) {\n                 if (!c) {\n                     c = e;\n                     g = a\n                 } else throw new Error(m);\n             });\n             return !c ? d : g\n         },\n         Skip: function(e) {\n             var b = this;\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = b.GetEnumerator();\n                     while (g++ < e && c.MoveNext());\n                 }, function() {\n                     return c.MoveNext() ? this.Yield(c.Current()) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         SkipWhile: function(b) {\n             b = d.CreateLambda(b);\n             var g = this;\n             return new c(function() {\n                 var c, i = 0,\n                     h = a;\n                 return new f(function() {\n                     c = g.GetEnumerator()\n                 }, function() {\n                     while (!h)\n                         if (c.MoveNext()) {\n                             if (!b(c.Current(), i++)) {\n                                 h = e;\n                                 return this.Yield(c.Current())\n                             }\n                             continue\n                         } else return a;\n                     return c.MoveNext() ? this.Yield(c.Current()) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         Take: function(e) {\n             var b = this;\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = b.GetEnumerator()\n                 }, function() {\n                     return g++ < e && c.MoveNext() ? this.Yield(c.Current()) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         TakeWhile: function(b) {\n             b = d.CreateLambda(b);\n             var e = this;\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     return c.MoveNext() && b(c.Current(), g++) ? this.Yield(c.Current()) : a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         TakeExceptLast: function(e) {\n             if (e == b) e = 1;\n             var g = this;\n             return new c(function() {\n                 if (e <= 0) return g.GetEnumerator();\n                 var b, c = [];\n                 return new f(function() {\n                     b = g.GetEnumerator()\n                 }, function() {\n                     while (b.MoveNext()) {\n                         if (c.length == e) {\n                             c.push(b.Current());\n                             return this.Yield(c.shift())\n                         }\n                         c.push(b.Current())\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(b)\n                 })\n             })\n         },\n         TakeFromLast: function(e) {\n             if (e <= 0 || e == b) return c.Empty();\n             var g = this;\n             return new c(function() {\n                 var j, h, i = [];\n                 return new f(function() {\n                     j = g.GetEnumerator()\n                 }, function() {\n                     while (j.MoveNext()) {\n                         i.length == e && i.shift();\n                         i.push(j.Current())\n                     }\n                     if (h == b) h = c.From(i).GetEnumerator();\n                     return h.MoveNext() ? this.Yield(h.Current()) : a\n                 }, function() {\n                     d.Dispose(h)\n                 })\n             })\n         },\n         IndexOf: function(c) {\n             var a = b;\n             this.ForEach(function(d, b) {\n                 if (d === c) {\n                     a = b;\n                     return e\n                 }\n             });\n             return a !== b ? a : -1\n         },\n         LastIndexOf: function(b) {\n             var a = -1;\n             this.ForEach(function(d, c) {\n                 if (d === b) a = c\n             });\n             return a\n         },\n         ToArray: function() {\n             var a = [];\n             this.ForEach(function(b) {\n                 a.push(b)\n             });\n             return a\n         },\n         ToLookup: function(c, b, a) {\n             c = d.CreateLambda(c);\n             b = d.CreateLambda(b);\n             a = d.CreateLambda(a);\n             var e = new n(a);\n             this.ForEach(function(g) {\n                 var f = c(g),\n                     a = b(g),\n                     d = e.Get(f);\n                 if (d !== undefined) d.push(a);\n                 else e.Add(f, [a])\n             });\n             return new q(e)\n         },\n         ToObject: function(b, a) {\n             b = d.CreateLambda(b);\n             a = d.CreateLambda(a);\n             var c = {};\n             this.ForEach(function(d) {\n                 c[b(d)] = a(d)\n             });\n             return c\n         },\n         ToDictionary: function(c, b, a) {\n             c = d.CreateLambda(c);\n             b = d.CreateLambda(b);\n             a = d.CreateLambda(a);\n             var e = new n(a);\n             this.ForEach(function(a) {\n                 e.Add(c(a), b(a))\n             });\n             return e\n         },\n         ToJSON: function(a, b) {\n             return JSON.stringify(this.ToArray(), a, b)\n         },\n         ToString: function(a, c) {\n             if (a == b) a = \"\";\n             if (c == b) c = g.Identity;\n             return this.Select(c).ToArray().join(a)\n         },\n         Do: function(b) {\n             var e = this;\n             b = d.CreateLambda(b);\n             return new c(function() {\n                 var c, g = 0;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     if (c.MoveNext()) {\n                         b(c.Current(), g++);\n                         return this.Yield(c.Current())\n                     }\n                     return a\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         ForEach: function(c) {\n             c = d.CreateLambda(c);\n             var e = 0,\n                 b = this.GetEnumerator();\n             try {\n                 while (b.MoveNext())\n                     if (c(b.Current(), e++) === a) break\n             } finally {\n                 d.Dispose(b)\n             }\n         },\n         Write: function(c, f) {\n             if (c == b) c = \"\";\n             f = d.CreateLambda(f);\n             var g = e;\n             this.ForEach(function(b) {\n                 if (g) g = a;\n                 else document.write(c);\n                 document.write(f(b))\n             })\n         },\n         WriteLine: function(a) {\n             a = d.CreateLambda(a);\n             this.ForEach(function(b) {\n                 document.write(a(b));\n                 document.write(\"<br />\")\n             })\n         },\n         Force: function() {\n             var a = this.GetEnumerator();\n             try {\n                 while (a.MoveNext());\n             } finally {\n                 d.Dispose(a)\n             }\n         },\n         Let: function(b) {\n             b = d.CreateLambda(b);\n             var e = this;\n             return new c(function() {\n                 var g;\n                 return new f(function() {\n                     g = c.From(b(e)).GetEnumerator()\n                 }, function() {\n                     return g.MoveNext() ? this.Yield(g.Current()) : a\n                 }, function() {\n                     d.Dispose(g)\n                 })\n             })\n         },\n         Share: function() {\n             var e = this,\n                 d;\n             return new c(function() {\n                 return new f(function() {\n                     if (d == b) d = e.GetEnumerator()\n                 }, function() {\n                     return d.MoveNext() ? this.Yield(d.Current()) : a\n                 }, g.Blank)\n             })\n         },\n         MemoizeAll: function() {\n             var h = this,\n                 e, d;\n             return new c(function() {\n                 var c = -1;\n                 return new f(function() {\n                     if (d == b) {\n                         d = h.GetEnumerator();\n                         e = []\n                     }\n                 }, function() {\n                     c++;\n                     return e.length <= c ? d.MoveNext() ? this.Yield(e[c] = d.Current()) : a : this.Yield(e[c])\n                 }, g.Blank)\n             })\n         },\n         Catch: function(b) {\n             b = d.CreateLambda(b);\n             var e = this;\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     try {\n                         return c.MoveNext() ? this.Yield(c.Current()) : a\n                     } catch (d) {\n                         b(d);\n                         return a\n                     }\n                 }, function() {\n                     d.Dispose(c)\n                 })\n             })\n         },\n         Finally: function(b) {\n             b = d.CreateLambda(b);\n             var e = this;\n             return new c(function() {\n                 var c;\n                 return new f(function() {\n                     c = e.GetEnumerator()\n                 }, function() {\n                     return c.MoveNext() ? this.Yield(c.Current()) : a\n                 }, function() {\n                     try {\n                         d.Dispose(c)\n                     } finally {\n                         b()\n                     }\n                 })\n             })\n         },\n         Trace: function(c, a) {\n             if (c == b) c = \"Trace\";\n             a = d.CreateLambda(a);\n             return this.Do(function(b) {\n                 console.log(c, \":\", a(b))\n             })\n         }\n     };\n     var g = {\n             Identity: function(a) {\n                 return a\n             },\n             True: function() {\n                 return e\n             },\n             Blank: function() {}\n         },\n         i = {\n             Boolean: typeof e,\n             Number: typeof 0,\n             String: typeof \"\",\n             Object: typeof {},\n             Undefined: typeof undefined,\n             Function: typeof\n             function() {}\n         },\n         d = {\n             CreateLambda: function(a) {\n                 if (a == b) return g.Identity;\n                 if (typeof a == i.String)\n                     if (a == \"\") return g.Identity;\n                     else if (a.indexOf(\"=>\") == -1) return new Function(\"$,$$,$$$,$$$$\", \"return \" + a);\n                 else {\n                     var c = a.match(/^[(\\s]*([^()]*?)[)\\s]*=>(.*)/);\n                     return new Function(c[1], \"return \" + c[2])\n                 }\n                 return a\n             },\n             IsIEnumerable: function(b) {\n                 if (typeof Enumerator != i.Undefined) try {\n                     new Enumerator(b);\n                     return e\n                 } catch (c) {}\n                 return a\n             },\n             Compare: function(a, b) {\n                 return a === b ? 0 : a > b ? 1 : -1\n             },\n             Dispose: function(a) {\n                 a != b && a.Dispose()\n             }\n         },\n         k = {\n             Before: 0,\n             Running: 1,\n             After: 2\n         },\n         f = function(d, f, g) {\n             var c = new p,\n                 b = k.Before;\n             this.Current = c.Current;\n             this.MoveNext = function() {\n                 try {\n                     switch (b) {\n                         case k.Before:\n                             b = k.Running;\n                             d();\n                         case k.Running:\n                             if (f.apply(c)) return e;\n                             else {\n                                 this.Dispose();\n                                 return a\n                             }\n                         case k.After:\n                             return a\n                     }\n                 } catch (g) {\n                     this.Dispose();\n                     throw g;\n                 }\n             };\n             this.Dispose = function() {\n                 if (b != k.Running) return;\n                 try {\n                     g()\n                 } finally {\n                     b = k.After\n                 }\n             }\n         },\n         p = function() {\n             var a = b;\n             this.Current = function() {\n                 return a\n             };\n             this.Yield = function(b) {\n                 a = b;\n                 return e\n             }\n         },\n         j = function(f, b, c, e) {\n             var a = this;\n             a.source = f;\n             a.keySelector = d.CreateLambda(b);\n             a.descending = c;\n             a.parent = e\n         };\n     j.prototype = new c;\n     j.prototype.CreateOrderedEnumerable = function(a, b) {\n         return new j(this.source, a, b, this)\n     };\n     j.prototype.ThenBy = function(b) {\n         return this.CreateOrderedEnumerable(b, a)\n     };\n     j.prototype.ThenByDescending = function(a) {\n         return this.CreateOrderedEnumerable(a, e)\n     };\n     j.prototype.GetEnumerator = function() {\n         var h = this,\n             d, c, e = 0;\n         return new f(function() {\n             d = [];\n             c = [];\n             h.source.ForEach(function(b, a) {\n                 d.push(b);\n                 c.push(a)\n             });\n             var a = l.Create(h, b);\n             a.GenerateKeys(d);\n             c.sort(function(b, c) {\n                 return a.Compare(b, c)\n             })\n         }, function() {\n             return e < c.length ? this.Yield(d[c[e++]]) : a\n         }, g.Blank)\n     };\n     var l = function(c, d, e) {\n         var a = this;\n         a.keySelector = c;\n         a.descending = d;\n         a.child = e;\n         a.keys = b\n     };\n     l.Create = function(a, d) {\n         var c = new l(a.keySelector, a.descending, d);\n         return a.parent != b ? l.Create(a.parent, c) : c\n     };\n     l.prototype.GenerateKeys = function(d) {\n         var a = this;\n         for (var f = d.length, g = a.keySelector, e = new Array(f), c = 0; c < f; c++) e[c] = g(d[c]);\n         a.keys = e;\n         a.child != b && a.child.GenerateKeys(d)\n     };\n     l.prototype.Compare = function(e, f) {\n         var a = this,\n             c = d.Compare(a.keys[e], a.keys[f]);\n         if (c == 0) {\n             if (a.child != b) return a.child.Compare(e, f);\n             c = d.Compare(e, f)\n         }\n         return a.descending ? -c : c\n     };\n     var h = function(a) {\n         this.source = a\n     };\n     h.prototype = new c;\n     h.prototype.Any = function(a) {\n         return a == b ? this.source.length > 0 : c.prototype.Any.apply(this, arguments)\n     };\n     h.prototype.Count = function(a) {\n         return a == b ? this.source.length : c.prototype.Count.apply(this, arguments)\n     };\n     h.prototype.ElementAt = function(a) {\n         return 0 <= a && a < this.source.length ? this.source[a] : c.prototype.ElementAt.apply(this, arguments)\n     };\n     h.prototype.ElementAtOrDefault = function(a, b) {\n         return 0 <= a && a < this.source.length ? this.source[a] : b\n     };\n     h.prototype.First = function(a) {\n         return a == b && this.source.length > 0 ? this.source[0] : c.prototype.First.apply(this, arguments)\n     };\n     h.prototype.FirstOrDefault = function(a, d) {\n         return d != b ? c.prototype.FirstOrDefault.apply(this, arguments) : this.source.length > 0 ? this.source[0] : a\n     };\n     h.prototype.Last = function(d) {\n         var a = this;\n         return d == b && a.source.length > 0 ? a.source[a.source.length - 1] : c.prototype.Last.apply(a, arguments)\n     };\n     h.prototype.LastOrDefault = function(d, e) {\n         var a = this;\n         return e != b ? c.prototype.LastOrDefault.apply(a, arguments) : a.source.length > 0 ? a.source[a.source.length - 1] : d\n     };\n     h.prototype.Skip = function(d) {\n         var b = this.source;\n         return new c(function() {\n             var c;\n             return new f(function() {\n                 c = d < 0 ? 0 : d\n             }, function() {\n                 return c < b.length ? this.Yield(b[c++]) : a\n             }, g.Blank)\n         })\n     };\n     h.prototype.TakeExceptLast = function(a) {\n         if (a == b) a = 1;\n         return this.Take(this.source.length - a)\n     };\n     h.prototype.TakeFromLast = function(a) {\n         return this.Skip(this.source.length - a)\n     };\n     h.prototype.Reverse = function() {\n         var b = this.source;\n         return new c(function() {\n             var c;\n             return new f(function() {\n                 c = b.length\n             }, function() {\n                 return c > 0 ? this.Yield(b[--c]) : a\n             }, g.Blank)\n         })\n     };\n     h.prototype.SequenceEqual = function(d, e) {\n         return (d instanceof h || d instanceof Array) && e == b && c.From(d).Count() != this.Count() ? a : c.prototype.SequenceEqual.apply(this, arguments)\n     };\n     h.prototype.ToString = function(a, d) {\n         if (d != b || !(this.source instanceof Array)) return c.prototype.ToString.apply(this, arguments);\n         if (a == b) a = \"\";\n         return this.source.join(a)\n     };\n     h.prototype.GetEnumerator = function() {\n         var b = this.source,\n             c = 0;\n         return new f(g.Blank, function() {\n             return c < b.length ? this.Yield(b[c++]) : a\n         }, g.Blank)\n     };\n     var n = function() {\n             var h = function(a, b) {\n                     return Object.prototype.hasOwnProperty.call(a, b)\n                 },\n                 d = function(a) {\n                     return a === b ? \"null\" : a === undefined ? \"undefined\" : typeof a.toString === i.Function ? a.toString() : Object.prototype.toString.call(a)\n                 },\n                 l = function(d, c) {\n                     var a = this;\n                     a.Key = d;\n                     a.Value = c;\n                     a.Prev = b;\n                     a.Next = b\n                 },\n                 j = function() {\n                     this.First = b;\n                     this.Last = b\n                 };\n             j.prototype = {\n                 AddLast: function(c) {\n                     var a = this;\n                     if (a.Last != b) {\n                         a.Last.Next = c;\n                         c.Prev = a.Last;\n                         a.Last = c\n                     } else a.First = a.Last = c\n                 },\n                 Replace: function(c, a) {\n                     if (c.Prev != b) {\n                         c.Prev.Next = a;\n                         a.Prev = c.Prev\n                     } else this.First = a;\n                     if (c.Next != b) {\n                         c.Next.Prev = a;\n                         a.Next = c.Next\n                     } else this.Last = a\n                 },\n                 Remove: function(a) {\n                     if (a.Prev != b) a.Prev.Next = a.Next;\n                     else this.First = a.Next;\n                     if (a.Next != b) a.Next.Prev = a.Prev;\n                     else this.Last = a.Prev\n                 }\n             };\n             var k = function(c) {\n                 var a = this;\n                 a.count = 0;\n                 a.entryList = new j;\n                 a.buckets = {};\n                 a.compareSelector = c == b ? g.Identity : c\n             };\n             k.prototype = {\n                 Add: function(i, j) {\n                     var a = this,\n                         g = a.compareSelector(i),\n                         f = d(g),\n                         c = new l(i, j);\n                     if (h(a.buckets, f)) {\n                         for (var b = a.buckets[f], e = 0; e < b.length; e++)\n                             if (a.compareSelector(b[e].Key) === g) {\n                                 a.entryList.Replace(b[e], c);\n                                 b[e] = c;\n                                 return\n                             }\n                         b.push(c)\n                     } else a.buckets[f] = [c];\n                     a.count++;\n                     a.entryList.AddLast(c)\n                 },\n                 Get: function(i) {\n                     var a = this,\n                         c = a.compareSelector(i),\n                         g = d(c);\n                     if (!h(a.buckets, g)) return undefined;\n                     for (var e = a.buckets[g], b = 0; b < e.length; b++) {\n                         var f = e[b];\n                         if (a.compareSelector(f.Key) === c) return f.Value\n                     }\n                     return undefined\n                 },\n                 Set: function(k, m) {\n                     var b = this,\n                         g = b.compareSelector(k),\n                         j = d(g);\n                     if (h(b.buckets, j))\n                         for (var f = b.buckets[j], c = 0; c < f.length; c++)\n                             if (b.compareSelector(f[c].Key) === g) {\n                                 var i = new l(k, m);\n                                 b.entryList.Replace(f[c], i);\n                                 f[c] = i;\n                                 return e\n                             }\n                     return a\n                 },\n                 Contains: function(j) {\n                     var b = this,\n                         f = b.compareSelector(j),\n                         i = d(f);\n                     if (!h(b.buckets, i)) return a;\n                     for (var g = b.buckets[i], c = 0; c < g.length; c++)\n                         if (b.compareSelector(g[c].Key) === f) return e;\n                     return a\n                 },\n                 Clear: function() {\n                     this.count = 0;\n                     this.buckets = {};\n                     this.entryList = new j\n                 },\n                 Remove: function(g) {\n                     var a = this,\n                         f = a.compareSelector(g),\n                         e = d(f);\n                     if (!h(a.buckets, e)) return;\n                     for (var b = a.buckets[e], c = 0; c < b.length; c++)\n                         if (a.compareSelector(b[c].Key) === f) {\n                             a.entryList.Remove(b[c]);\n                             b.splice(c, 1);\n                             if (b.length == 0) delete a.buckets[e];\n                             a.count--;\n                             return\n                         }\n                 },\n                 Count: function() {\n                     return this.count\n                 },\n                 ToEnumerable: function() {\n                     var d = this;\n                     return new c(function() {\n                         var c;\n                         return new f(function() {\n                             c = d.entryList.First\n                         }, function() {\n                             if (c != b) {\n                                 var d = {\n                                     Key: c.Key,\n                                     Value: c.Value\n                                 };\n                                 c = c.Next;\n                                 return this.Yield(d)\n                             }\n                             return a\n                         }, g.Blank)\n                     })\n                 }\n             };\n             return k\n         }(),\n         q = function(a) {\n             var b = this;\n             b.Count = function() {\n                 return a.Count()\n             };\n             b.Get = function(b) {\n                 return c.From(a.Get(b))\n             };\n             b.Contains = function(b) {\n                 return a.Contains(b)\n             };\n             b.ToEnumerable = function() {\n                 return a.ToEnumerable().Select(function(a) {\n                     return new o(a.Key, a.Value)\n                 })\n             }\n         },\n         o = function(b, a) {\n             this.Key = function() {\n                 return b\n             };\n             h.call(this, a)\n         };\n     o.prototype = new h;\n     return c\n }()"}