{"_id":"AtSLWNBKCGx5nNCwy","shortid":"BywVQIKR-","recipe":"html-to-xlsx","engine":"handlebars","data":{"shortid":"BkRpMI4XX"},"modificationDate":"2018-07-20T00:45:45.391Z","phantom":{"orientation":"landscape","footerHeight":"6.9cm","margin":"0.5","headerHeight":"2.5cm","header":"","footer":"<br><br><br><br><br><br>\n<div style='display: none' id='last'>\n    <table style=\"border-collapse:collapse; width: 100%;\">\n               <tfoot>\n                <tr style=\"font-family:Verdana; font-size:10pt;\">\n                    <td center>{{Single ParameterFields \"PreparedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"CheckedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"ApprovedBy\"}}</td>\n                </tr>\n                <tr style=\"font-family:Verdana; font-size:10pt;\">\n                    <th></th>\n                    <th style=\"border-top:1px solid black; font-weight:normal; font-color:black;\" colspan = \"1\" center>Prepared by</th>\n                    <td colspan = \"3\" ></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Checked by</th>\n                    <td colspan = \"3\"></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Approved by</th>\n               </tr>\n            </tfoot>\n        </table>\n   \n</div>\n\n<script>\n    if ({#pageNum} == {#numPages}) {\n        document.getElementById('last').style.display='block'\n    } else {\n        document.getElementById('last').style.display='none'\n    }\n</script>\n\n\n <br>\n <table style=\"width:100%;\">\n                    <tr>\n                <td style=\"font-weight:normal; text-align:left; font-family:Verdana; font-size:8pt;\">\n                   Print Date: {{FormatDate Date 'mmm dd, yyyy'}}\n                </td>\n                <Tr>\n                    <td></td>\n                </Tr>\n                \n                \n            </tr>\n            <tr>\n                <td style=\"font-weight:normal; text-align:left; font-family:Verdana; font-size:8pt;\">\n                    Print Time: {{FormatDate Time 'h:MM TT'}}  \n                </td>\n                <td style=\"text-align:right; font-size:8pt; font-family:Verdana;\">{#pageNum}/{#numPages}</td>\n            </tr>\n               </table>\n<br><br>\n"},"resources":{"items":[{"shortid":"BkRpMI4XX","entitySet":"data"}]},"name":"UndertimeReport(Excel)","content":"<style>\n  table {\n        width: 100%; \n        /*border-collapse: collapse;*/\n    }\n    \n    /*thead > tr > th,  [border-bottom] {*/\n    /*    border-bottom: 1px solid black;*/\n    /*    padding-bottom:5px;*/\n    /*}*/\n    /*tfoot > tr > th, [border-top]{*/\n    /*    border-top: 1px  solid black;*/\n    /*    padding-top: 5px;*/\n    /*}*/\n    p {\n        font-size: 25;\n    }\n    \n    [center] {\n        text-align: center;\n    }\n    \n    [bold] {\n        font-weight: bold;\n    }\n    \n    [padding-20] {\n        padding-left : 20px;\n    }\n  [total]{\n      font-weight:bold;\n      font-size:25px;\n  }\n   [bot-border]{\n    border-bottom: 1px solid black;\n    font:10pt Verdana;\n    font-weight:bold;\n     \n  }\n  [padding-bot]{\n       padding-bottom:5px;\n       padding-top:5px;\n       padding-left : 50px;\n  }\n  [top-margin]{\n      margin-top:35px;\n  }\n  /*thead { display: table-row-group } */\n</style>\n\n <table>\n            \n<thead style=\"text-align:center; font:10pt Verdana;\">\n    <tr>\n         <th colspan=\"8\" style=\"border-style:none; text-align:center; color:black; font-size:14pt;\">{{Single DataSource \"Company\"}} </th>\n        </tr>\n        <tr>\n        <th colspan=\"8\" style=\"border-style:none; text-align:center; color:black; font-size:12pt; padding-bottom:10px;\">Employee Undertime Report</th>\n        </tr>\n  \n     <tr>\n     <th colspan=\"8\" style=\"border-style:none; text-align:center; color:black; font-weight:normal; font-size:10pt;\">{{SingleDate DataSource \"StartDate\" \"mmmm dd, yyyy\"}} - {{SingleDate DataSource \"EndDate\" \"mmmm dd, yyyy\"}}\n     </th>\n    </tr>\n\n     </thead>\n            \n  <tr>\n  <th padding-bot bot-border>Employee Code</th>\n  <th padding-bot bot-border>Employee</th>\n  <th padding-bot bot-border>Date</th>\n                    <th padding-bot bot-border>Daily Schedule</th>\n                    <th padding-bot bot-border>Time In / Time Out</th>\n                    <th padding-bot bot-border>UT</th>\n                    </tr>\n         \n            \n            <tbody center style=\"font-family:Verdana; font-size:8px;\">\n                {{#group DataSource by = \"$.Employee\" order=\"$.Date\"}}\n                {{#each source}}\n                <tr>\n                    <td>{{EmployeeCode}}</td>\n                    <td>{{Employee}}</td>\n                    <td>{{formatDate Date \"mmm dd, yyyy\"}}</td>\n                    <td>{{DailySchedule}}</td>\n                    <td>{{formatDate TimeIn \"h:MM TT\"}} / {{formatDate TimeOut \"h:MM TT\"}}</td>\n                    <td >{{UT}}</td>\n                </tr>\n                {{/each}}\n                {{/group}}\n           \n            </tbody>\n            <tfooter>\n                 <tr><td colspan=\"200\" style=\" border-top: 2px solid black;\"></td></tr>\n                <!--\n                <tr style=\"font-family:Verdana; font-size:8px;\">\n                    <td center>{{Single ParameterFields \"PreparedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"CheckedBy\"}}</td>\n                    <td colspan = \"3\"></td>\n                    <td center>{{Single ParameterFields \"ApprovedBy\"}}</td>\n                </tr>\n                <tr style=\"font-family:Verdana; font-size:8px;\">\n                    <th></th>\n                    <th style=\"border-top:1px solid black; font-weight:normal; font-color:black;\" colspan = \"1\" center>Prepared by</th>\n                    <td colspan = \"3\" ></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Checked by</th>\n                    <td colspan = \"3\"></td>\n                    <th style=\"border-top:1px solid black; font-weight:normal;\" colspan = \"1\" center>Approved by</th>\n               </tr>-->\n            \n            </tfooter>\n        </table>\n\n     \n               \n         \n       \n\n ","helpers":"\n//Edited by Yoku 06082018\n\n//Set number of computed columns\nvar _count = 15;\nvar _total = new Array(15);\nvar _grandtotal = new Array(15);\n\n//Set initial value of totals\nfor(var i = 0; i < _count; i++){\n    _total[i] = 0.00;\n    _grandtotal[i] = 0.00;\n}\n\n//Update total values and grand total values\nfunction InitGroup(val){\n    for(var i = 0; i < _grandtotal.length; i++){\n        _grandtotal[i] += _total[i];\n        _total[i] = 0.00;\n    }\n    return val;\n}\n\n//Return total value based on index\nfunction GetTotal(index)\n{\nreturn AddComma(_total[index].toFixed(2));\n\n}\nfunction get(obj, prop) {\n\tvar parts = prop.split('.'),\n\t\tlast = parts.pop();\n\n\twhile ((prop = parts.shift())) {\n\t\tobj = obj[prop];\n\n\t\tif (obj === null) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn obj[last];\n}\n\n\n//Return grand total value based on index\nfunction GetGrandTotal(index){\n    return AddComma(_grandtotal[index].toFixed(2));\n}\n\n//Updates amount\n//Change zero amount to '-'\n\nfunction CheckZero(index, amt){\n    _total[index] += parseFloat(amt);\n    return parseFloat(amt) > 0 ? AddComma(amt.toFixed(2)) : amt.toFixed(2);\n     if (amt === 0 )\n    return parseFloat(amt) > 0 ? amt.toFixed(2) : '-';\n}\n\nfunction getValueByColumn(ls, columnfilter, columnfiltervalue, columnresult){\n    var gg = Enumerable\n                .From(ls)\n                .Where(function(x){ return x[columnfilter] === columnfiltervalue })\n                .Select('$.' + columnresult).FirstOrDefault(0);\n    return gg === 0 ? '-' : formatNumber(gg);\n}\n\nfunction getRowTotal(ls, columnfilter){\n    var gg = Enumerable.From(ls).Sum('$.' + columnfilter);\n    return gg === 0 ? '-' : formatNumber(gg);\n}\n\nfunction getGroupTotalByColumn(ls, columnfilter, columnfiltervalue, columnresult){\n    var gg = Enumerable\n                .From(ls)\n                .Where(function(x){ return x[columnfilter] === columnfiltervalue })\n                .Select('$.' + columnresult).Sum();\n    return gg === 0 ? '-' : formatNumber(gg);\n}\n\nfunction GetGrandTotal(index, amt){\n    _grandtotal[index] += parseFloat(amt);\n    //return parseFloat(amt) > 0 ? AddComma(amt.toFixed(2)) : amt.toFixed(2);\n    return parseFloat(amt) > 0 ? amt.toFixed(2) : '-';\n}\n\nfunction AddComma(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n//-->>\n\nfunction Single(ds, col){\n    if(ds.length === 0) return '';\n    return ds[0][col];\n}\n\nfunction formatNumber(x, decimal) {\n        var parts = parseFloat(x).toFixed(decimal || 2).toString().split(\".\");\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return parts.join(\".\");\n}\n\nfunction SingleDate(ds, col, frmt){\n    var gg = Single(ds, col);\n     return DateTime.Format(gg, frmt)\n}\n\nfunction FormatDate(dt, frmt){\n    return DateTime.Format(dt, frmt);\n}\n\nfunction Sum(itms){\n    return itms.length;\n}\n\nvar DateTime = (function () {\n\t\t\t        return {\n\t\t\t            Format: function () {\n\t\t\t                var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n                                timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n                                timezoneClip = /[^-+\\dA-Z]/g,\n                                pad = function (val, len) {\n                                    val = String(val);\n                                    len = len || 2;\n                                    while (val.length < len) val = \"0\" + val;\n                                    return val;\n                                };\n\n\t\t\t                // Regexes and supporting functions are cached through closure\n\t\t\t                return function (date, mask, utc) {\n\t\t\t                    //var dF = DateTime.Format;\n\t\t\t                    if (DateTime.IsNewtonFormat(date))\n\t\t\t                        date = date.replace('T', ' ');\n\n\t\t\t                    // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n\t\t\t                    if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n\t\t\t                        mask = date;\n\t\t\t                        date = undefined;\n\t\t\t                    }\n\n\t\t\t                    // Passing date through Date applies Date.parse, if necessary\n\t\t\t                    date = date ? new Date(date) : new Date;\n\t\t\t                    if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n\t\t\t                    //mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\t\t\t                    mask = String(DateTime.masks[mask] || mask || DateTime.masks['default']);\n\n\t\t\t                    // Allow setting the utc argument via the mask\n\t\t\t                    if (mask.slice(0, 4) == \"UTC:\") {\n\t\t\t                        mask = mask.slice(4);\n\t\t\t                        utc = true;\n\t\t\t                    }\n\n\t\t\t                    var _ = utc ? \"getUTC\" : \"get\",\n                                    d = date[_ + \"Date\"](),\n                                    D = date[_ + \"Day\"](),\n                                    m = date[_ + \"Month\"](),\n                                    y = date[_ + \"FullYear\"](),\n                                    H = date[_ + \"Hours\"](),\n                                    M = date[_ + \"Minutes\"](),\n                                    s = date[_ + \"Seconds\"](),\n                                    L = date[_ + \"Milliseconds\"](),\n                                    o = utc ? 0 : date.getTimezoneOffset(),\n                                    flags = {\n                                        d: d,\n                                        dd: pad(d),\n                                        ddd: DateTime.i18n.dayNames[D], // dF.i18n.dayNames[D],\n                                        dddd: DateTime.i18n.dayNames[D + 7],\n                                        m: m + 1,\n                                        mm: pad(m + 1),\n                                        mmm: DateTime.i18n.monthNames[m],\n                                        mmmm: DateTime.i18n.monthNames[m + 12],\n                                        yy: String(y).slice(2),\n                                        yyyy: y,\n                                        h: H % 12 || 12,\n                                        hh: pad(H % 12 || 12),\n                                        H: H,\n                                        HH: pad(H),\n                                        M: M,\n                                        MM: pad(M),\n                                        s: s,\n                                        ss: pad(s),\n                                        l: pad(L, 3),\n                                        L: pad(L > 99 ? Math.round(L / 10) : L),\n                                        t: H < 12 ? \"a\" : \"p\",\n                                        tt: H < 12 ? \"am\" : \"pm\",\n                                        T: H < 12 ? \"A\" : \"P\",\n                                        TT: H < 12 ? \"AM\" : \"PM\",\n                                        Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                                        o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                                        S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                                    };\n\n\t\t\t                    return mask.replace(token, function ($0) {\n\t\t\t                        return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n\t\t\t                    });\n\t\t\t                };\n\t\t\t            }(),\n\t\t\t            masks: {\n\t\t\t                \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n\t\t\t                shortDate: \"m/d/yy\",\n\t\t\t                mediumDate: \"mmm dd, yyyy\",\n\t\t\t                longDate: \"mmmm d, yyyy\",\n\t\t\t                fullDate: \"dddd, mmmm d, yyyy\",\n\t\t\t                shortTime: \"h:MM TT\",\n\t\t\t                mediumTime: \"h:MM:ss TT\",\n\t\t\t                longTime: \"h:MM:ss TT Z\",\n\t\t\t                isoDate: \"yyyy-mm-dd\",\n\t\t\t                isoTime: \"HH:MM:ss\",\n\t\t\t                isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n\t\t\t                isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n\t\t\t                inSysDateTime: \"hh:MM TT mmm dd, yyyy\",\n\t\t\t                sometime: 'hhMMss',\n\t\t\t                shortDate2: \"mm/dd/yyyy\",\n\t\t\t                jDPInsysDate: \"M dd, yyyy\"\n\t\t\t            },\n\t\t\t            i18n: {\n\t\t\t                dayNames: [\n                                \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n                                \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n\t\t\t                ],\n\t\t\t                monthNames: [\n                                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n                                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t\t\t                ]\n\t\t\t            },\n\t\t\t            JSONDate: function (jsonDate, format) {\n\t\t\t                //console.log(jsonDate.match(/\\d+/)[0]);\n\n\t\t\t                var d = new Date(parseInt(jsonDate.substr(6)));\n\n\t\t\t                return DateTime.Format(d, format);\n\t\t\t            },\n\t\t\t            ShortDate2: function (dateValue) {\n\t\t\t                date = new Date();\n\n\t\t\t                if (typeof dateValue != 'undefined')\n\t\t\t                    date = dateValue;\n\n\t\t\t                return DateTime.Format(date, DateTime.masks.shortDate2)\n\t\t\t            },\n\t\t\t            Between: function (sdate, edate, callback, onFinish) {\n\t\t\t                try {\n\t\t\t                    var i = 0;\n\t\t\t                    var d = sdate;\n\t\t\t                    while (true) {\n\t\t\t                        if (d >= edate) {\n\t\t\t                            onFinish();\n\t\t\t                            break;\n\t\t\t                        } else\n\t\t\t                            callback(i, d);\n\n\t\t\t                        d.setTime(d.getTime() + 86400000);\n\t\t\t                        i++;\n\t\t\t                    }\n\t\t\t                } catch (ex) {\n\t\t\t                    console.error('DateTime.Between', ex);\n\t\t\t                }\n\t\t\t            },\n\t\t\t            ToDate: function (jsonDate) {\n\t\t\t                return new Date(parseInt(jsonDate.substr(6)));\n\t\t\t            },\n\t\t\t            IsNewtonFormat: function (dte) {\n\t\t\t                return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})?.(\\d{1,3})?$/.test(dte);\n\t\t\t                //return /^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})+(.\\d{3})?$/.test(dte);\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }())\n\t\t\t    \nfunction get(obj, prop) {\n\tvar parts = prop.split('.'),\n\t\tlast = parts.pop();\n\n\twhile ((prop = parts.shift())) {\n\t\tobj = obj[prop];\n\n\t\tif (obj === null) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn obj[last];\n}\n\nfunction noop() {\n\treturn '';\n}\n\nfunction groupBy(handlebars) {\n\tvar helpers = {\n\t\t/**\n\t\t * @method group\n\t\t * @param {Array} list\n\t\t * @param {Object} options\n\t\t * @param {Object} options.hash\n\t\t * @param {String} options.hash.by\n\t\t * @return {String} Rendered partial.\n\t\t */\n\t\tgroup: function (list, options) {\n\t\t\toptions = options || {};\n\n\t\t\tvar fn = options.fn || noop,\n\t\t\t\tinverse = options.inverse || noop,\n\t\t\t\thash = options.hash,\n\t\t\t\tprop = hash && hash.by,\n\t\t\t\tkeys = [],\n\t\t\t\tgroups = {};\n\n\t\t\tif (!prop || !list || !list.length) {\n\t\t\t\treturn inverse(this);\n\t\t\t}\n\n\t\t\tfunction groupKey(item) {\n\t\t\t\tvar key = get(item, prop);\n\n\t\t\t\tif (keys.indexOf(key) === -1) {\n\t\t\t\t\tkeys.push(key);\n\t\t\t\t}\n\n\t\t\t\tif (!groups[key]) {\n\t\t\t\t\tgroups[key] = {\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\titems: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tgroups[key].items.push(item);\n\t\t\t}\n\n\t\t\tfunction renderGroup(buffer, key) {\n\t\t\t\treturn buffer + fn(groups[key]);\n\t\t\t}\n\n\t\t\tlist.forEach(groupKey);\n\n\t\t\treturn keys.reduce(renderGroup, '');\n\t\t}\n\t};\n\n\thandlebars.registerHelper(helpers);\n\n\treturn handlebars;\n}\n\nhandlebars.registerHelper(groupBy(handlebars));\n\n\n//Edited by Yoku 06082018\n\n\n"}